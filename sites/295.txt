Multi-Window Support  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Multi-Window Support
  



  Android 7.0 adds support for displaying more than one app at the
  same time. On handheld devices, two apps can run side-by-side or
  one-above-the-other in split-screen mode. On TV devices, apps can
  use picture-in-picture mode to continue video playback while users
  are interacting with another app.


  If your app targets Android 7.0 (API level 24) or higher, you can configure how your app
  handles multi-window display. For example, you can specify your activity's
  minimum allowable dimensions. You can also disable multi-window display for
  your app, ensuring that the system only shows your app in full-screen
  mode.

Overview

  Android allows several apps to share the screen at once. For
  example, a user could split the screen, viewing a web page on the left side
  while composing an email on the right side. The user experience depends on
  the version of the Android OS and the kind of device:


Handheld devices running Android 7.0 offer split-screen
  mode. In this mode, the system fills the screen with two apps, showing them
  either side-by-side or one-above-the-other. The user can drag the dividing
  line separating the two to make one app larger and the other smaller.
  
Starting with Android 8.0, apps can put themselves
  in picture-in-picture mode, allowing
  them to continue showing content while the user browses or interacts with
  other apps.
  
Manufacturers of larger devices can choose to enable freeform
  mode, in which the user can freely resize each activity. If the
  manufacturer enables this feature, the device offers freeform mode in addition
  to split-screen mode.
  



Figure 1. Two apps running side-by-side in split-screen mode.


  The user can switch into multi-window mode in the following ways:


If the user opens the Overview
  screen and performs a long press on an
  activity title, they can drag that activity to a highlighted portion of the
  screen to put the activity in multi-window mode.
  
If the user performs a long press on the Overview button, the device puts
  the current activity in multi-window mode, and opens the Overview screen to
  let the user choose another activity to share the screen.
  


  Users can drag and
  drop data from one activity to another while the activities are sharing
  the screen.

Multi-Window Lifecycle

  Multi-window mode does not change the activity
  lifecycle.


  In multi-window mode, only the activity the user has most recently interacted
  with is active at a given time. This activity is considered topmost,
  and is the only activity in the
  RESUMED
  state.
  All other visible activities are
  STARTED
  but are not
  RESUMED.
  However, the system gives these visible-but-not-resumed activities higher priority
  than activities that are not visible. If the user interacts with one of the
  visible activities, that activity is resumed, and the previously topmost
  activity enters the
  STARTED
  state.


Note: In multi-window mode, an app might not be in the
  RESUMED
  state even though it is visible to the user. An app might need to continue its
  operation while it is not topmost. For example, a video-playing app in
  this state should continue showing its video. For this
  reason, we recommend that activities that play video not pause
  video playback in response to the
  ON_PAUSE
  lifecycle event. Instead, the activity should begin playback in response to
  ON_START,
  and pause playback in response to
  ON_STOP.
  If you handle the lifecycle events directly instead of using the
  Lifecycle package,
  pause video playback in your onStop() handler, and resume playback in onStart().


  When the user puts an app into multi-window mode, the system notifies the
  activity of a configuration change, as specified in Handling Configuration
  Changes. This also happens when the user resizes the app, or puts the app
  back into full-screen mode.
  Essentially, this change has the same activity-lifecycle
  implications as when the system notifies the app that the device has switched
  from portrait to landscape mode, except that the device dimensions are
  changed instead of just being swapped. As discussed in Handling Configuration
  Changes, your activity can handle the configuration change itself, or it
  can allow the system to destroy the activity and recreate it with the new
  dimensions.


  If the user is resizing a window and makes it larger in either dimension, the
  system resizes the activity to match the user action and issues configuration changes
  as needed. If the app lags behind in drawing in newly-exposed areas, the
  system temporarily fills those areas with the color specified by the
  windowBackground attribute or by the default
  windowBackgroundFallback style attribute.

Configuring Your App for Multi-Window Mode

  If your app targets API level 24 or higher, you can configure how and
  whether your app's activities support multi-window display. You can set
  attributes in your manifest to control both size and layout.
  A root activity's attribute settings apply to all activities
  within its task stack. For example, if the root activity has
  android:resizeableActivity set to true, then all activities
  in the task stack are resizable.


Note: If you build a multi-orientation app that targets API
  level 23 or lower, and the user uses the app in
  multi-window mode, the system forcibly resizes the app. The system presents a
  dialog box warning the user that the app may behave unexpectedly. The system
  does not resize fixed-orientation apps; if
  the user attempts to open a fixed-orientation app under multi-window mode,
  the app takes over the whole screen.

android:resizeableActivity

  Set this attribute in your manifest's <activity>
  or <application>
  element to enable or disable multi-window display:


android:resizeableActivity=["true" | "false"]


  If this attribute is set to true, the activity can be launched in
  split-screen and freeform modes. If the attribute is set to false, the
  activity does not support multi-window mode. If this value is false, and the
  user attempts to launch the activity in multi-window mode, the activity takes
  over the full screen.


  If your app targets API level 24, but you do not specify a value
  for this attribute, the attribute's value defaults to true.

android:supportsPictureInPicture

  Set this attribute in your manifest's <activity>
  node to indicate whether the activity supports Picture-in-Picture
  display. This attribute is ignored if android:resizeableActivity
  is false.


android:supportsPictureInPicture=["true" | "false"]

Layout attributes

  With Android 7.0, the <layout> manifest element
  supports several attributes that affect how an activity behaves in
  multi-window mode:



android:defaultWidth


    Default width of the activity when launched in freeform mode.
  

android:defaultHeight


    Default height of the activity when launched in freeform mode.
  

android:gravity


    Initial placement of the activity when launched in freeform mode. See the
    Gravity reference for suitable values.
  

android:minHeight, android:minWidth


    Minimum height and minimum width for the activity in both split-screen
    and freeform modes. If the user moves the divider in split-screen mode
    to make an activity smaller than the specified minimum, the system crops
    the activity to the size the user requests.
  


  For example, the following code shows how to specify an activity's default
  size and location, and its minimum size, when the activity is displayed in
  freeform mode:


<activity android:name=".MyActivity">
    <layout android:defaultHeight="500dp"
          android:defaultWidth="600dp"
          android:gravity="top|end"
          android:minHeight="450dp"
          android:minWidth="300dp" />
</activity>

Running Your App in Multi-Window Mode

  Beginning with Android 7.0, the system offers functionality to support apps
  that can run in multi-window mode.

Disabled features in multi-window mode

  Certain features are disabled or ignored when a device is in multi-window
  mode, because they don’t make sense for an activity which may be sharing the
  device screen with other activities or apps. Such features include:


Some System UI
  customization options are disabled; for example, apps cannot hide the status
  bar if they are not running in full-screen mode.
  
The system ignores changes to the android:screenOrientation attribute.
  

Multi-window change notification and querying

Activity offers the following methods to support
  multi-window display.



isInMultiWindowMode()


    Call to find out if the activity is in multi-window mode.
  

isInPictureInPictureMode()


    Call to find out if the activity is in picture-in-picture
    mode.
    
Note: Picture-in-picture mode is a special case of
      multi-window mode. If myActivity.isInPictureInPictureMode()
      returns true, then myActivity.isInMultiWindowMode() also
      returns true.
    


onMultiWindowModeChanged()


    The system calls this method whenever the activity goes into or out of
    multi-window mode. The system passes the method a value of true if the
    activity is entering multi-window mode, and false if the activity is
    leaving multi-window mode.
  

onPictureInPictureModeChanged()


    The system calls this method whenever the activity goes into or out of
    picture-in-picture mode. The system passes the method a value of true if
    the activity is entering picture-in-picture mode, and false if the activity
    is leaving picture-in-picture mode.
  


  The Fragment class exposes versions of many of these
  methods, for example Fragment.onMultiWindowModeChanged().

Entering picture-in-picture mode

  To put an activity in picture-in-picture mode, call Activity.enterPictureInPictureMode(). This method has no effect if the
  device does not support picture-in-picture mode. For more information, see
  the Picture-in-Picture
  documentation.

Launch New Activities in Multi-Window Mode

  When you launch a new activity, you can hint to the system that the new
  activity should be displayed adjacent to the current one, if possible. To do
  this, use the intent flag
  FLAG_ACTIVITY_LAUNCH_ADJACENT. Passing
  this flag requests the following behavior:


If the device is in split-screen mode, the system attempts to create the
  new activity next to the activity that launched it, so the two activities
  share the screen. The system is not guaranteed to be able to do this, but it
  makes the activities adjacent if possible.
  
If the device is not in split-screen mode, this flag has no effect.
  


  If a device is in freeform mode and you are launching a new activity, you can
  specify the new activity's dimensions and screen location by calling
  ActivityOptions.setLaunchBounds(). This method has no effect if
  the device is not in multi-window mode.


Note: If you launch an activity within a task stack, the
  activity replaces the activity on the screen, inheriting all of its
  multi-window properties. If you want to launch the new activity as a separate
  window in multi-window mode, you must launch it in a new task stack.

Supporting drag and drop

  Users can drag and
  drop data from one activity to another while the two activities are
  sharing the screen. (Prior to Android 7.0, users could only drag and drop data
  within a single activity.) For this reason, you may want to add drag and drop
  functionality to your app if your app does not currently support it.



DragAndDropPermissions


    Token object responsible for specifying the permissions granted to the app
    that receives a drop.
  

View.startDragAndDrop()


    Alias for View.startDrag(). To enable
    cross-activity drag and drop, pass the flag DRAG_FLAG_GLOBAL.
    If you need to give URI permissions to the recipient activity, pass the flags DRAG_FLAG_GLOBAL_URI_READ or
    DRAG_FLAG_GLOBAL_URI_WRITE, as appropriate.
  

View.cancelDragAndDrop()


    Cancels a drag operation currently in progress. Can only be called by the
    app that originated the drag operation.
  

View.updateDragShadow()


    Replaces the drag shadow for a drag operation currently in progress. Can
    only be called by the app that originated the drag operation.
  

Activity.requestDragAndDropPermissions()


    Requests the permissions for the content URIs passed with the ClipData
    contained in a DragEvent.
  

Testing Your App's Multi-Window Support

  Whether or not your app targets API level 24 or higher, you should
  verify how it behaves in multi-window mode in case a user tries to launch it
  in multi-window mode on a device running Android 7.0 or higher.

Configuring a Test Device

  If a device runs Android 7.0 or higher, it automatically supports split-screen
  mode.

If your app targets API level 23 or lower

  If your app targets API level 23 or lower and the user attempts to use
  the app in multi-window mode, the system forcibly resizes the app unless the
  app declares a fixed orientation.


  If your app does not declare a fixed orientation, you should launch your app
  on a device running Android 7.0 or higher and attempt to put the app in
  split-screen mode. Verify that the user experience is
  acceptable when the app is forcibly resized.


  If the app declares a fixed orientation, you should attempt to put the app in
  multi-window mode. Verify that when you do so, the app remains
  in full-screen mode.

If you support multi-window mode

  If your app targets API level 24 or higher and does not disable
  multi-window support, verify the following behavior under both split-screen
  and freeform modes.


Launch the app in full-screen mode, then switch to multi-window mode by
  long-pressing the Overview button. Verify that the app switches properly.
  
Launch the app directly in multi-window mode, and verify that the app
  launches properly. You can launch an app in multi-window mode by pressing the
  Overview button, then long-pressing the title bar of your app and dragging it
  to one of the highlighted areas on the screen.
  
Resize your app in split-screen mode by dragging the divider line.
  Verify that the app resizes without crashing, and that necessary UI elements
  are visible.
  
If you have specified minimum dimensions for your app, attempt to resize
  the app below those dimensions. Verify that you cannot resize the app to be
  smaller than the specified minimum.
  
Through all tests, verify that your app's performance is acceptable. For
  example, verify that there is not too long a lag to update the UI after the
  app is resized.
  

Testing checklist

  To verify your app's performance in multi-window mode, try the following
  operations. You should try these operations in both split-screen and
  multi-window mode, except where otherwise noted.


Enter and leave multi-window mode.
  
Switch from your app to another app, and verify that the app behaves
  properly while it is visible but not active. For example, if your app is
  playing video, verify that the video continues to play while the user is
  interacting with another app.
  
In split-screen mode, try moving the dividing bar to make your app both
  larger and smaller. Try these operations in both side-by-side and
  one-above-the-other configurations. Verify that the app does not crash,
  essential functionality is visible, and the resize operation doesn't take too
  long.
  
Perform several resize operations in rapid succession. Verify that your
  app doesn't crash or leak memory. For information about checking your app's
  memory usage, use Android Studio's 
  Memory Profiler.
  
Use your app normally in a number of different window configurations, and
  verify that the app behaves properly. Verify that text is readable, and that
  UI elements aren't too small to interact with.
  

If you have disabled multi-window support

  If you disabled multi-window support by setting
  android:resizeableActivity="false", you should launch your app on
  a device running Android 7.0 or higher and attempt to put the app in
  freeform and split-screen modes. Verify that when you do so, the app remains
  in full-screen mode.


For further information about multi-window support in Android,
see 
Five Tips for Preparing for Multi-Window in Android N and the

Multi-Window Playground sample app.



  

Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 29, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
