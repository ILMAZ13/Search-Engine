Build a calling app  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Build a calling app
  


A calling app allows users to receive or place audio or video calls on their
device. Calling apps use their own user interface for the calls instead of using
the default Phone app interface, as shown in the following screenshot.

An example of a calling app using its own user interface

The Android framework includes the android.telecom package, which
contains classes that help you build a calling app according to the telecom
framework. Building your app according to the telecom framework provides the
following benefits:

Your app interoperates correctly with the native telecom subsystem in the
device.
Your app interoperates correctly with other calling apps that also adhere to
the framework.
The framework helps your app manage audio and video routing.
The framework helps your app determine whether its calls have focus.

Manifest declarations and permissions
In your app manifest, declare that your app uses the
MANAGE_OWN_CALLS,
READ_CALL_LOG, and
READ_PHONE_STATE
permissions, as shown in the following example:
<manifest … >
    <uses-permission android:name="android.permission.MANAGE_OWN_CALLS"/>
    <uses-permission android:name="android.permission.READ_CALL_LOG"/>

    <!-- Needed only if your calling app reads numbers from the `PHONE_STATE`
         intent action. -->
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    …
</manifest>

For more information about declaring app permissions, see
Permissions.
You must declare a service that specifies the class that implements the
ConnectionService class in your app. The telecom
subsystem requires that the service declares the BIND_TELECOM_CONNECTION_SERVICE permission to be
able to bind to it. The following example shows how to declare the service in
your app manifest:
<service android:name="com.example.MyConnectionService"
    android:permission="android.permission.BIND_TELECOM_CONNECTION_SERVICE">
    <intent-filter>
        <action android:name="android.telecom.ConnectionService" />
    </intent-filter>
</service>

For more information about declaring app components, including services, see
App Components.
Implement the connection service
Your calling app must provide an implemention of the ConnectionService class that the telecom subsystem can bind to.
Your ConnectionService implementation should override
the following methods:

onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest)
The telecom subsystem calls this method in response to
your app calling placeCall(Uri, Bundle)
to create a new outgoing call. Your app returns a new instance of your Connection class implementation (for more information, see
Implement the connection) to represent the new
outgoing call. You can further customize the outgoing connection by performing
the following actions:


Your app should call the setConnectionProperties(int) method with the PROPERTY_SELF_MANAGED constant as the argument
to indicate that the connection originated from a calling app.
If your app supports putting calls on hold, call the setConnectionCapabilities(int) method and set the
argument to the bit mask value of the CAPABILITY_HOLD and CAPABILITY_SUPPORT_HOLD constants.
To set the name of the caller, use the setCallerDisplayName(String, int) method
passing the PRESENTATION_ALLOWED
constant as the int parameter to indicate that the caller's name should
be shown.
To ensure that the outgoing call has the appropriate video state, call the
setVideoState(int) method of the Connection object and send the value returned by the
getVideoState() method of the
ConnectionRequest object.

onCreateOutgoingConnectionFailed(PhoneAccountHandle, ConnectionRequest)
The telecom subsystem calls this method when your app calls the placeCall(Uri, Bundle) method and the outgoing call cannot
be placed. In response to this situation, your app should inform the user (for
example, using an alert box or toast) that the outgoing call could not be
placed. Your app may not be able to place a call if there is an ongoing
emergency call, or if there is an ongoing call in another app which cannot be
put on hold before placing your call.
onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest)
The telecom subsystem calls this method when your app calls the addNewIncomingCall(PhoneAccountHandle, Bundle) method
to inform the system of a new incoming call in your app. Your app returns a
new instance of your Connection implementation (for
more information, see Implement the connection)
to represent the new incoming call. You can further customize the incoming
connection by performing the following actions:

Your app should call the setConnectionProperties(int) method with the PROPERTY_SELF_MANAGED constant as the argument
to indicate that the connection originated from a calling app.
If your app supports putting calls on hold, call the setConnectionCapabilities(int) method and set the
argument to the bit mask value of the CAPABILITY_HOLD and CAPABILITY_SUPPORT_HOLD constants.
To set the name of the caller, use the setCallerDisplayName(String, int) method
passing the PRESENTATION_ALLOWED
constant as the int parameter to indicate that the caller's name should
be shown.
To specify the phone number or address of the incoming call, use the
setAddress(Uri, int) method of the Connection object.
To ensure that the outgoing call has the appropriate video state, call the
setVideoState(int) method of the Connection object and send the value returned by the
getVideoState() method of the
ConnectionRequest object.

onCreateIncomingConnectionFailed(PhoneAccountHandle, ConnectionRequest)
The telecom subsystem calls this method when your app calls the addNewIncomingCall(PhoneAccountHandle, Bundle) method to inform Telecom of
a new incoming call, but the incoming call isn't permitted (for more
information, see calling constraints). Your app should
silently reject the incoming call, optionally posting a notification to inform
the user of the missed call.

Implement the connection
Your app should create a subclass of Connection to
represent the calls in your app. You should override the following methods in
your implementation:

onShowIncomingCallUi()
The telecom subsystem calls this method when you add a new incoming call and
your app should show its incoming call UI.
Note: When you add a new incoming call, the telecom subsystem shows the
incoming call UI on behalf of your app if there is an ongoing call in
another app that cannot be put on hold. The user can decide whether to
answer the incoming call and drop the current one or reject the incoming
call. In these cases, the onShowIncomingCallUI() method of your app isn't
called.
onCallAudioStateChanged(CallAudioState)
The telecom subsystem calls this method to inform your app that the current audio
route or mode has changed. This is called in response to your app changing the
audio mode using the setAudioRoute(int)
method. This method may also be called if the system changes the audio route
(for example, when a Bluetooth headset disconnects).
onHold()
The telecom subsystem calls this method when it wants to put a call on hold.
In response to this request, your app should hold the call and then invoke the
setOnHold() method to inform the system
that the call is being held. The telecom subsystem may call this method when
an in-call service, such as Android Auto, that is showing your call wants to
relay a user request to put the call on hold. The telecom subsystem also calls
this method if the user makes a call active in another app. For more
information about in-call services, see InCallService.
onUnhold()
The telecom subsystem calls this method when
it wants to resume a call that has been put on hold. Once your app has resumed
the call, it should invoke the setActive()
method to inform the system that the call is no longer on hold. The telecom
subsystem may call this method when an in-call service, such as Android Auto,
that is showing your call wants to relay a request to resume the call. For
more information about in-call services, see InCallService.
onAnswer()
The telecom subsystem calls this method to inform
your app that an incoming call should be answered. Once your app has answered
the call, it should invoke the setActive()
method to inform the system that the call has been answered. The telecom
subsystem may call this method when your app adds a new incoming call and
there is already an ongoing call in another app which cannot be put on hold.
The telecom subsystem displays the incoming call UI on behalf of your app in
these instances. The framework provides an overloaded method that provides
support to specify the video state in which to answer the call. For more
information, see onAnswer(int).
onReject()
The telecom subsystem calls this method when it wants to reject an incoming
call. Once your app has rejected the call, it should call the setDisconnected(DisconnectCause) and specify REJECTED as the parameter. Your app should
then call the destroy() method to inform
the system that the app has processed the call. The telecom subsystem calls
this method when the user has rejected an incoming call from your app.
onDisconnect()
The telecom subsystem calls this method when it wants to disconnect a call.
Once the call has ended, your app should call the setDisconnected(DisconnectCause) method and specify LOCAL as the parameter to indicate that a
user request caused the call to be disconected. Your app should then call the
destroy() method to inform the telecom
subsystem that the app has processed the call. The system may call this method
when the user has disconnected a call through another in-call service such as
Android Auto. The system also calls this method when your call must be
disconnected to allow other call to be placed, for example, if the user wants
to place an emergency call. For more information about in-call services, see
InCallService.

Handle common calling scenarios
Making use of the ConnectionService API in your call
flow involves interacting with the other classes in the android.telecom
package. The following sections describe common calling scenarios and how your
app should use the APIs to handle them.
Answer incoming calls
The flow to handle incoming calls changes whether there are calls in other apps
or not. The reason for the difference in the flows is that the telecom framework
must establish some constraints when there are active calls in other apps to
ensure a stable environment for all calling apps on the device. For more
information, see Calling constraints.
No active calls in other apps
To answer incoming calls when there are no active calls in other apps, follow
these steps:

Your app receives a new incoming call using its usual mechanisms.
Use the addNewIncomingCall(PhoneAccountHandle, Bundle) method to
inform the telecom subsystem about the new incoming call.
The telecom subsystem binds to your app's ConnectionService implementation and requests a new instance
of the Connection class representing the new incoming
call using the onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest) method.
The telecom subsystem informs your app that it should show its incoming call
user interface using the onShowIncomingCallUi() method.
Your app shows its incoming UI using a notification with an associated
full-screen intent. For more information, see onShowIncomingCallUi().
Call the setActive() method if the user
accepts the incoming call, or setDisconnected(DisconnectCause) specifying REJECTED as the parameter followed by a
call to the destroy() method if the user
rejects the incoming call.

Active calls in other apps which cannot be put on hold
To answer incoming calls when there are active calls in other apps which can't
be put on hold, follow these steps:

Your app receives a new incoming call using its usual mechanisms.
Use the addNewIncomingCall(PhoneAccountHandle, Bundle) method to
inform the telecom subsystem about the new incoming call.
The telecom subsystem binds to your app's ConnectionService implementation and requests a new instance
of the Connection object representing the new
incoming call using the onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest) method.
The telecom subsystem displays the incoming call UI for your incoming call.
If the user accepts the call, the telecom subsystem calls the onAnswer() method. You should call the setActive() method to indicate to the telecom
subsystem that the call is now connected.
If the user rejects the call, the telecom subsystem calls the onReject() method. You should call the setDisconnected(DisconnectCause) method specifying REJECTED as the parameter followed by a
call to the destroy() method.

Place outgoing calls
The flow for placing an outgoing call involves handling the possibility that the
call cannot be placed because of constraints imposed by the telecom framework.
For more information, see Calling constraints.
To place an outgoing call, follow these steps:

The user initiates an outgoing call within your app.
Use the placeCall(Uri, Bundle) method to inform the
telecom subsystem about the new outgoing call. Take the following
considerations for the method parameters:

The Uri parameter represents the address where the
call is being placed to. For regular phone numbers, use the tel: URI
scheme.
The Bundle parameter allows you to provide information
about your calling app by adding the PhoneAccountHandle object of your app to the EXTRA_PHONE_ACCOUNT_HANDLE extra. Your
app must provide the PhoneAccountHandle object to every outgoing call.
The Bundle parameter also allows you to specify if the
outgoing call includes video by specifying the STATE_BIDIRECTIONAL value in the EXTRA_START_CALL_WITH_VIDEO_STATE extra.
Consider that by default, the telecom subsystem routes video calls to the
speakerphone.

The telecom subsystem binds to your app's ConnectionService
implementation.
If your app isn't able to place an outgoing call, the telecom subsystem calls
the onCreateOutgoingConnectionFailed(PhoneAccountHandle, ConnectionRequest) method to
inform your app that the call cannot be placed at the current time. Your app
should inform the user that the call cannot be placed.
If your app is able to place the outgoing call, the telecom subsystem calls
the onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest)
method. Your app should return an instance of your Connection class to represent the new outgoing call. For
more information about the properties that you should set in the connection,
see Implement the connection service.
When the outgoing call has been connected, call the setActive() method to inform the telecom subsystem
that the call is active.

End a call
To end a call, follow these steps:

Call the setDisconnected(DisconnectCause) sending LOCAL as the parameter if the user
terminated the call, or send REMOTE
as the parameter if the other party terminated the call.
Call the destroy() method.

Calling constraints
To ensure a consistent and simple calling experience for your users, the telecom
framework enforces some constraints for managing calls on the device. For
example, consider that the user has installed two calling apps which implement
the self-managed ConnectionService API, FooTalk and
BarTalk. In this case, the following constraints apply:

There can only be ongoing calls in any one calling app at a time. This
constraint means the user can only be in calls in either FooTalk or BarTalk at
any one time. The user can be in multiple calls in the FooTalk app, but the
user cannot be in a call in FooTalk and a call in BarTalk at the same time.
If the user is engaged in regular managed calls (for example, using the
built-in Phone or Dialer app), the user cannot be in calls originated from
calling apps. This means that if the user is in a regular call using their
mobile carrier, they cannot also be in a FooTalk or BarTalk call concurrently.
The telecom subsystem disconnects your app's calls if the user dials an
emergency call.
Your app cannot receive or place calls while the user is in an emergency call.
If there is an ongoing call in the another calling app when your app receives
an incoming call, answering the incoming call ends any ongoing calls in the
other app. You app should not display its usual incoming call user interface.
The telecom framework displays the incoming call user interface and informs
the user that answering the new call will end their ongoing call(s). This
means if the user is in a FooTalk call and the BarTalk app receives an
incoming call, the telecom framework informs the user that they have a new
incoming BarTalk call and that answering the BarTalk call will end their
FooTalk call.



Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 23, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
