Broadcasts overview  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Broadcasts overview
  


Android apps can send or receive broadcast messages from the Android system and
other Android apps, similar to the
publish-subscribe
design pattern. These broadcasts are sent when an event of interest occurs.
For example, the Android system sends broadcasts when various system events
occur, such as when the system boots up or the device starts charging. Apps
can also send custom broadcasts, for example, to notify other apps of
something that they might be interested in (for example, some new data has
been downloaded).
Apps can register to receive specific broadcasts. When a broadcast is sent,
the system automatically routes broadcasts to apps that have subscribed to
receive that particular type of broadcast.
Generally speaking, broadcasts can be used as a messaging system across apps
and outside of the normal user flow. However, you must be careful not to abuse
the opportunity to respond to broadcasts and run jobs in the background that
can contribute to a slow system performance, as described in the following
video.




About system broadcasts
The system automatically sends broadcasts when various system events occur,
such as when the system switches in and out of airplane mode. System
broadcasts are sent to all apps that are subscribed to receive the
event.
The broadcast message itself is wrapped in an Intent
object whose action string identifies the event that occurred (for example
android.intent.action.AIRPLANE_MODE).  The intent may also include
additional information bundled into its extra field. For example, the airplane
mode intent includes a boolean extra that indicates whether or not Airplane
Mode is on.
For more information about how to read intents and get the action string from
an intent, see Intents and Intent
Filters.
For a complete list of system broadcast actions, see the
BROADCAST_ACTIONS.TXT file in the Android SDK. Each broadcast action has a
constant field associated with it. For example, the value of the constant
ACTION_AIRPLANE_MODE_CHANGED is
android.intent.action.AIRPLANE_MODE. Documentation for each broadcast action
is available in its associated constant field.
Changes to system broadcasts
As the Android platform evolves, it periodically changes how system broadcasts
behave. Keep the following changes in mind if your app targets Android 7.0 (API
level 24) or higher, or if it's installed on devices running Android 7.0 or
higher.
Android 9
Beginning with Android 9 (API level 28), The
NETWORK_STATE_CHANGED_ACTION
broadcast doesn't receive information about the user's location or personally
identifiable data.
In addition, if your app is installed on a device running Android 9 or higher,
system broadcasts from Wi-Fi don't contain SSIDs, BSSIDs, connection
information, or scan results. To get this information, call
getConnectionInfo()
instead.
Android 8.0
Beginning with Android 8.0 (API level 26), the system imposes additional
restrictions on manifest-declared receivers.
If your app targets Android 8.0 or higher, you cannot use the manifest to
declare a receiver for most implicit broadcasts (broadcasts that don't target
your app specifically). You can still use a
context-registered receiver when the
user is actively using your app.
Android 7.0
Android 7.0 (API level 24) and higher don't send the following system
broadcasts:

ACTION_NEW_PICTURE
ACTION_NEW_VIDEO

Also, apps targeting Android 7.0 and higher must register the CONNECTIVITY_ACTION broadcast
using registerReceiver(BroadcastReceiver, IntentFilter).
Declaring a receiver in the manifest doesn't work.
Receiving broadcasts
Apps can receive broadcasts in two ways: through manifest-declared receivers
and context-registered receivers.
Manifest-declared receivers
If you declare a broadcast receiver in your manifest, the system launches your
app (if the app is not already running) when the broadcast is sent.
Note: If your app targets API level 26 or higher, you cannot use the manifest
to declare a receiver for implicit broadcasts (broadcasts that do not target
your app specifically), except for a few implicit broadcasts that are exempted
from that restriction. In most
cases, you can use scheduled jobs instead.
To declare a broadcast receiver in the manifest, perform the following steps:

Specify the <receiver>
element in your app's manifest.

<receiver android:name=".MyBroadcastReceiver"  android:exported="true">
    <intent-filter>
        <action android:name="android.intent.action.BOOT_COMPLETED"/>
        <action android:name="android.intent.action.INPUT_METHOD_CHANGED" />
    </intent-filter>
</receiver>

The intent filters specify the broadcast actions your receiver subscribes to.
Subclass BroadcastReceiver and implement onReceive(Context, Intent). The
broadcast receiver in the following example logs and displays the contents
of the broadcast:

Kotlin

private const val TAG = "MyBroadcastReceiver"

class MyBroadcastReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        StringBuilder().apply {
            append("Action: ${intent.action}\n")
            append("URI: ${intent.toUri(Intent.URI_INTENT_SCHEME)}\n")
            toString().also { log ->
                Log.d(TAG, log)
                Toast.makeText(context, log, Toast.LENGTH_LONG).show()
            }
        }
    }
}

Java

public class MyBroadcastReceiver extends BroadcastReceiver {
        private static final String TAG = "MyBroadcastReceiver";
        @Override
        public void onReceive(Context context, Intent intent) {
            StringBuilder sb = new StringBuilder();
            sb.append("Action: " + intent.getAction() + "\n");
            sb.append("URI: " + intent.toUri(Intent.URI_INTENT_SCHEME).toString() + "\n");
            String log = sb.toString();
            Log.d(TAG, log);
            Toast.makeText(context, log, Toast.LENGTH_LONG).show();
        }
    }




The system package manager registers the receiver when the app is installed.
The receiver then becomes a separate entry point into your app which means
that the system can start the app and deliver the broadcast if the app is not
currently running.
The system creates a new BroadcastReceiver component
object to handle each broadcast that it receives. This object is valid only
for the duration of the call to onReceive(Context, Intent). Once your code
returns from this method, the system considers the component  no longer
active.
Context-registered receivers
To register a receiver with a context, perform the following steps:

Create an instance of BroadcastReceiver.

Kotlin

val br: BroadcastReceiver = MyBroadcastReceiver()
Java

BroadcastReceiver br = new MyBroadcastReceiver();


Create an IntentFilter and register the receiver
by calling registerReceiver(BroadcastReceiver, IntentFilter):

Kotlin

val filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION).apply {
    addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED)
}
registerReceiver(br, filter)
Java

IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    this.registerReceiver(br, filter);


Note: To register for local broadcasts, call LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead.
Context-registered receivers receive broadcasts as long as their
registering context is valid. For an example, if you register within an
Activity context, you receive broadcasts as long as
the activity is not destroyed. If you register with the Application
context, you receive broadcasts as long as the app is running.
To stop receiving broadcasts, call unregisterReceiver(android.content.BroadcastReceiver).
Be sure to unregister the receiver when you no longer need it or the
context is no longer valid.
Be mindful of where you register and unregister the receiver,  for
example, if you register a receiver in onCreate(Bundle) using the activity's context, you
should unregister it in onDestroy() to
prevent leaking the receiver out of the activity context. If you register
a receiver in onResume(), you should
unregister it in onPause() to prevent
registering it multiple times (If you don't want to receive broadcasts
when paused, and this can cut down on unnecessary system overhead). Do not
unregister in onSaveInstanceState(Bundle),
because this isn't called if the user moves back in the history stack.

Effects on process state
The state of your BroadcastReceiver (whether it is
running or not) affects the state of its containing process, which can in turn
affect its likelihood of being killed by the system. For example, when a
process executes a receiver (that is, currently running the code in its onReceive()
method), it is considered to be a foreground process. The system keeps the
process running except under cases of extreme memory pressure.
However, once your code returns from onReceive(), the BroadcastReceiver is
no longer active. The receiver's host process becomes only as important as the
other app components that are running in it. If that process hosts only a
manifest-declared receiver (a common case for apps that the user has never or
not recently interacted with), then upon returning from onReceive(), the
system considers its process to be a low-priority process and may kill
it to make resources available for other more important processes.
For this reason, you should not start long running background threads from a
broadcast receiver. After onReceive(), the system can kill the process at any time to
reclaim memory, and in doing so, it terminates the spawned thread running in
the process. To avoid this, you should either call goAsync() (if you want a little more time to
process the broadcast in a background thread) or schedule a JobService from the receiver using the JobScheduler, so the system knows that the process continues
to perform active work. For more information, see Processes and Application
Life Cycle.
The following snippet shows a BroadcastReceiver that
uses goAsync() to flag that
it needs more time to finish after onReceive() is complete. This is especially
useful if the work you want to complete in your onReceive() is long enough to
cause the UI thread to miss a frame (>16ms), making it better suited for a background
thread.

Kotlin

private const val TAG = "MyBroadcastReceiver"

class MyBroadcastReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val pendingResult: PendingResult = goAsync()
        val asyncTask = Task(pendingResult, intent)
        asyncTask.execute()
    }

    private class Task(
            private val pendingResult: PendingResult,
            private val intent: Intent
    ) : AsyncTask() {

        override fun doInBackground(vararg params: String?): String {
            val sb = StringBuilder()
            sb.append("Action: ${intent.action}\n")
            sb.append("URI: ${intent.toUri(Intent.URI_INTENT_SCHEME)}\n")
            return toString().also { log ->
                Log.d(TAG, log)
            }
        }

        override fun onPostExecute(result: String?) {
            super.onPostExecute(result)
            // Must call finish() so the BroadcastReceiver can be recycled.
            pendingResult.finish()
        }
    }
}
Java

public class MyBroadcastReceiver extends BroadcastReceiver {
    private static final String TAG = "MyBroadcastReceiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        final PendingResult pendingResult = goAsync();
        Task asyncTask = new Task(pendingResult, intent);
        asyncTask.execute();
    }

    private static class Task extends AsyncTask {

        private final PendingResult pendingResult;
        private final Intent intent;

        private Task(PendingResult pendingResult, Intent intent) {
            this.pendingResult = pendingResult;
            this.intent = intent;
        }

        @Override
        protected String doInBackground(String... strings) {
            StringBuilder sb = new StringBuilder();
            sb.append("Action: " + intent.getAction() + "\n");
            sb.append("URI: " + intent.toUri(Intent.URI_INTENT_SCHEME).toString() + "\n");
            String log = sb.toString();
            Log.d(TAG, log);
            return log;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            // Must call finish() so the BroadcastReceiver can be recycled.
            pendingResult.finish();
        }
    }
}


Sending broadcasts
Android provides three ways for apps to send broadcast:

The sendOrderedBroadcast(Intent, String)
method sends broadcasts to one receiver at a time. As each receiver executes
in turn, it can propagate a result to the next receiver, or it can
completely abort the broadcast so that it won't be passed to other
receivers. The order receivers run in can be controlled with the
android:priority attribute of the matching intent-filter; receivers with the
same priority will be run in an arbitrary order.
The sendBroadcast(Intent) method sends
broadcasts to all receivers in an undefined order. This is called a Normal
Broadcast. This is more efficient, but means that receivers cannot read
results from other receivers, propagate data received from the broadcast, or
abort the broadcast.
The LocalBroadcastManager.sendBroadcast method sends broadcasts to receivers
that are in the same app as the sender. If you don't need to send broadcasts
across apps, use local broadcasts. The implementation is much more efficient
(no interprocess communication needed) and you don't need to worry about any
security issues related to other apps being able to receive or send your
broadcasts.

The following code snippet demonstrates how to send a broadcast by creating an
Intent and calling sendBroadcast(Intent).

Kotlin

Intent().also { intent ->
    intent.setAction("com.example.broadcast.MY_NOTIFICATION")
    intent.putExtra("data", "Notice me senpai!")
    sendBroadcast(intent)
}
Java

Intent intent = new Intent();
intent.setAction("com.example.broadcast.MY_NOTIFICATION");
intent.putExtra("data","Notice me senpai!");
sendBroadcast(intent);


The broadcast message is wrapped in an Intent object.
The intent's action string must provide the app's Java package name syntax and
uniquely identify the broadcast event. You can attach additional information
to the intent with putExtra(String, Bundle).
You can also limit a broadcast to a set of apps in the same organization by
calling setPackage(String) on the intent.
Note: Although intents are used for both sending broadcasts and starting
activities with startActivity(Intent), these
actions are completely unrelated. Broadcast receivers can't see or capture
intents used to start an activity; likewise, when you broadcast an intent, you
can't find or start an activity.
Restricting broadcasts with permissions
Permissions allow you to restrict broadcasts to the set of apps that hold
certain permissions. You can enforce restrictions on either the sender or
receiver of a broadcast.
Sending with permissions
When you call sendBroadcast(Intent, String) or
sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle), you can specify a
permission parameter. Only receivers who have requested that permission with
the  tag in their manifest (and subsequently been granted the
permission if it is dangerous) can receive the broadcast. For example, the
following code sends a broadcast:

Kotlin

sendBroadcast(Intent("com.example.NOTIFY"), Manifest.permission.SEND_SMS)
Java

sendBroadcast(new Intent("com.example.NOTIFY"),
              Manifest.permission.SEND_SMS);


To receive the broadcast, the receiving app must request the permission as
shown below:
<uses-permission android:name="android.permission.SEND_SMS"/>

You can specify either an existing system permission like SEND_SMS or define a custom permission with the
<permission> element. For
information on permissions and security in general, see the System
Permissions.
Note: Custom permissions are registered when the app is installed. The app
that defines the custom permission must be installed before the app that uses
it.
Receiving with permissions
If you specify a permission parameter when registering a broadcast receiver
(either  with registerReceiver(BroadcastReceiver, IntentFilter, String, Handler) or in
<receiver> tag in your
manifest), then only broadcasters who have requested the permission with the
<uses-permission> tag
in their manifest (and subsequently been granted the permission if it is
dangerous) can send an Intent to the receiver.
For example, assume your receiving app has a manifest-declared receiver as
shown below:
<receiver android:name=".MyBroadcastReceiver"
          android:permission="android.permission.SEND_SMS">
    <intent-filter>
        <action android:name="android.intent.action.AIRPLANE_MODE"/>
    </intent-filter>
</receiver>

Or your receiving app has a context-registered receiver as shown below:

Kotlin

var filter = IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED)
registerReceiver(receiver, filter, Manifest.permission.SEND_SMS, null )
Java

IntentFilter filter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
registerReceiver(receiver, filter, Manifest.permission.SEND_SMS, null );


Then, to be able to send broadcasts to those receivers, the sending app must
request the permission as shown below:
<uses-permission android:name="android.permission.SEND_SMS"/>

Security considerations and best practices
Here are some security considerations and best practices for sending and
receiving broadcasts:

If you don't need to send broadcasts to components outside of your app, then
send and receive local broadcasts with the LocalBroadcastManager which is available in the
Support Library. The LocalBroadcastManager is much more efficient (no
interprocess communication needed) and allows you to avoid thinking about
any security issues related to other apps being able to receive or send your
broadcasts. Local Broadcasts can be used as a general purpose pub/sub event
bus in your app without any overheads of system wide broadcasts.
If many apps have registered to receive the same broadcast in their
manifest, it can cause the system to launch a lot of apps, causing a
substantial impact on both device performance and user experience. To avoid
this, prefer using context registration over manifest declaration.
Sometimes, the Android system itself enforces the use of context-registered
receivers. For example, the CONNECTIVITY_ACTION broadcast is delivered
only to context-registered receivers.
Do not broadcast sensitive information using an implicit intent. The
information can be read by any app that registers to receive the broadcast.
There are three ways to control who can receive your broadcasts:

You can specify a permission when sending a broadcast.
In Android 4.0 and higher, you can specify a
package with
setPackage(String) when sending a
broadcast. The system restricts the broadcast to the set of apps that
match the package.
You can send local broadcasts with LocalBroadcastManager.

When you register a receiver, any app can send potentially malicious
broadcasts to your app's receiver. There are three ways to limit the
broadcasts that your app receives:

You can specify a permission when registering a broadcast receiver.
For manifest-declared receivers, you can set the
android:exported
attribute to "false" in the manifest. The receiver does not receive
broadcasts from sources outside of the app.
You can limit yourself to only local broadcasts with LocalBroadcastManager.

The namespace for broadcast actions is global. Make sure that action names
and other strings are written in a namespace you own, or else you may
inadvertently conflict with other apps.
Because a receiver's onReceive(Context, Intent) method runs on
the main thread, it should execute and return quickly. If you need to
perform long running work, be careful about spawning threads or starting
background services because the system can kill the entire process after
onReceive() returns. For more information, see Effect on process
state To perform long running work, we
recommend:

Calling goAsync() in your
receiver's onReceive() method and passing the BroadcastReceiver.PendingResult to a background thread.
This keeps the broadcast active after returning from onReceive().
However, even with this approach the system expects you to finish with
the broadcast very quickly (under 10 seconds). It does allow you to move
work to another thread to avoid glitching the main thread.
Scheduling a job with the JobScheduler. For more
information, see Intelligent Job
Scheduling.

Do not start activities from broadcast receivers because the user experience
is jarring; especially if there is more than one receiver. Instead, consider
displaying a notification.



Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 23, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
