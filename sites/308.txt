Application Fundamentals  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Application Fundamentals
  


Android apps can be written using Kotlin, Java, and C++ languages. The Android SDK tools compile
your code along with any data and resource files into an APK, an Android package,
which is an archive file with an .apk suffix. One APK file contains all the contents
of an Android app and is the file that Android-powered devices use to install the app.
Each Android app lives in its own security sandbox, protected by
 the following Android security features: 

The Android operating system is a multi-user Linux system in which each app is a
different user.
By default, the system assigns each app a unique Linux user ID (the ID is used only by
the system and is unknown to the app). The system sets permissions for all the files in an
app so that only the user ID assigned to that app can access them. 
Each process has its own virtual machine (VM), so an app's code runs in isolation from
other apps.
By default, every app runs in its own Linux process. The Android system starts
 the process when any
of the app's components need to be executed, and then shuts down the process
 when it's no longer
needed or when the system must recover memory for other apps.

The Android system implements the principle of least privilege. That is,
each app, by default, has access only to the components that it requires to do its work and
no more. This creates a very secure environment in which an app cannot access parts of
the system for which it is not given permission. However, there are ways for an app to share
 data with other apps and for an
app to access system services:

It's possible to arrange for two apps to share the same Linux user ID, in which case
they are able to access each other's files.  To conserve system resources, apps with the
same user ID can also arrange to run in the same Linux process and share the same VM. The
apps must also be signed with the same certificate.
An app can request permission to access device data such as the user's
contacts, SMS messages, the mountable storage (SD card), camera, and Bluetooth. The user has
to explicitly grant these permissions. For more information, see
Working with System Permissions.

The rest of this document introduces the following concepts:

The core framework components that define your app.
The manifest file in which you declare the components and the required device
  features for your
app.
Resources that are separate from the app code and that allow your app to
gracefully optimize its behavior for a variety of device configurations.

App components
App components are the essential building blocks of an Android app. Each
component is an entry point through which the system or a user can enter your app. Some
components depend on others.
There are four different types of app components:

Activities
Services
Broadcast receivers
Content providers

Each type serves a distinct purpose
and has a distinct lifecycle that defines how the component is created and destroyed.
 The following sections describe the four types of app components.

Activities
An activity is the entry point for interacting with the user. It represents a single
 screen with a user interface. For example,
an email app might have one activity that shows a list of new
emails, another activity to compose an email, and another activity for reading emails. Although
the activities work together to form a cohesive user experience in the email app, each one
is independent of the others. As such, a different app can start any one of these
activities if the email app allows it. For example, a camera app can start the
activity in the email app that composes new mail to allow the user to share a picture.

An activity facilitates the following key interactions between system and app:

  
Keeping track of what the user currently cares about (what is on screen) to ensure that the
      system keeps running the process that is hosting the activity.
Knowing that previously used processes contain things the user may return to (stopped
      activities), and thus more highly prioritize keeping those processes around.
Helping the app handle having its process killed so the user can return to activities
      with their previous state restored.
Providing a way for apps to implement user flows between each other, and for the system to
      coordinate these flows. (The most classic example here being share.)

You implement an activity as a subclass of the Activity class. For more
  information about the Activity class, see the
 Activities developer guide.

Services
A service is a general-purpose entry point for keeping an app running in the background
for all kinds of reasons. It is a component that runs in the background to perform long-running
operations or to perform work for remote processes. A service does not provide a user interface. For
example, a service might play music in the background while the user is in a different app, or
it might fetch data over the network without blocking user interaction with an activity. Another
component, such as an activity, can start the service and let it run or bind to it in order to
interact with it.

There are actually two very distinct semantics services tell the system about how to manage an app:

Started services tell the system to keep them running until their work is completed.
This could be to sync some data in the background or play music even after the user leaves the app.
Syncing data in the background or playing music also represent two different types of started
services that modify how the system handles them:

  
Music playback is something the user is directly aware of, so the app tells the system this
      by saying it wants to be foreground with a notification to tell the user about it; in this
      case the system knows that it should try really hard to keep that service's process running,
      because the user will be unhappy if it goes away.
    
A regular background service is not something the user is directly aware as running, so
      the system has more freedom in managing its process.  It may allow it to be killed
      (and then restarting the service sometime later) if it needs RAM for things that are of more
      immediate concern to the user.
    

Bound services run because some other app (or the system) has said that it wants to make use of the
service.  This is basically the service providing an API to another process.  The system thus
knows there is a dependency between these processes, so if process A is bound to a service in
process B, it knows that it needs to keep process B (and its service) running for A.  Further, if
process A is something the user cares about, then it also knows to treat process B as something the
user also cares about.

Because of their flexibility (for better or worse), services have turned out to be a really useful
building block for all kinds of higher-level system concepts.  Live wallpapers, notification
listeners, screen savers, input methods, accessibility services, and many other core system features
are all built as services that applications implement and the system binds to when they should be
running.

A service is implemented as a subclass of Service. For more information
about the Service class, see the 
Services developer guide.
Note: If your app targets Android 5.0 (API level 21) or later,
 use the JobScheduler class to schedule actions. JobScheduler has the
advantage of conserving battery by optimally scheduling jobs to reduce power consumption,
and by working with the Doze API.
For more information about using this class, see the JobScheduler
reference documentation.


Broadcast receivers
A broadcast receiver is a component that enables the system to deliver events to the
app outside of a regular user flow, allowing the app to respond to system-wide broadcast
announcements. Because broadcast receivers are another well-defined entry into the app, the system
can deliver broadcasts even to apps that aren't currently running.  So, for example, an app can
schedule an alarm to post a notification to tell the user about an upcoming event...
and by delivering that alarm to a BroadcastReceiver of the app, there is no need for the app to
remain running until the alarm goes off.

Many broadcasts originate from the system—for example,
 a broadcast announcing
that the screen has turned off, the battery is low, or a picture was captured.
Apps can also initiate broadcasts—for example, to let other apps know that
some data has been downloaded to the device and is available for them to use.
 Although broadcast
receivers don't display a user interface, they may create a status bar notification
to alert the user when a broadcast event occurs. More commonly, though, a broadcast receiver is
just a gateway to other components and is intended to do a very minimal amount of work.
 For instance, it might schedule a JobService to perform some work based
on the event with JobScheduler
A broadcast receiver is implemented as a subclass of BroadcastReceiver
and each broadcast is delivered as an Intent object. For more information,
see the BroadcastReceiver class.

Content providers
A content provider manages a shared set of app data that you can store in
the file system, in a SQLite database, on the web, or on any other persistent storage
location that your
app can access. Through the content provider, other apps can query or modify
the data if the content provider allows it.

For example, the Android system provides a content
provider that manages the user's contact information. As such, any app with the proper
permissions can query the content provider, such as
ContactsContract.Data, to read and write information about
a particular person.

It is tempting to think of a content provider as an abstraction on a database, because there is a
lot of API and support built in to them for that common case. However, they have a different
core purpose from a system-design perspective.

To the system, a content provider is an entry point into an app for publishing named data items,
identified by a URI scheme.  Thus an app can decide how it wants to map the data it contains to a
URI namespace, handing out those URIs to other entities which can in turn use them to access the
data.  There are a few particular things this allows the system to do in managing an app:

  
Assigning a URI doesn't require that the app remain running, so URIs can persist after their
      owning apps have exited. The system only needs to make sure that an owning app is
      still running when it has to retrieve the app's data from the corresponding URI.
These URIs also provide an important fine-grained security model.  For example, an
    app can place the URI for an image it has on the clipboard, but leave its content
    provider locked up so that other apps cannot freely access it.  When a second app attempts
    to access that URI on the clipboard,the system can allow that app to
    access the data via a temporary URI permission grant
    so that it is allowed to
    access the data only behind that URI, but nothing else in the second app.

Content providers are also useful for reading and writing data that is private to your
app and not shared.
A content provider is implemented as a subclass of ContentProvider
and must implement a standard set of APIs that enable other apps to perform
transactions. For more information, see the Content Providers developer
guide.


A unique aspect of the Android system design is that any app can start another
app’s component. For example, if you want the user to capture a
photo with the device camera, there's probably another app that does that and your
app can use it instead of developing an activity to capture a photo yourself. You don't
need to incorporate or even link to the code from the camera app.
Instead, you can simply start the activity in the camera app that captures a
photo. When complete, the photo is even returned to your app so you can use it. To the user,
it seems as if the camera is actually a part of your app.
When the system starts a component, it starts the process for that app if it's not
already running and instantiates the classes needed for the component. For example, if your
app starts the activity in the camera app that captures a photo, that activity
runs in the process that belongs to the camera app, not in your app's process.
Therefore, unlike apps on most other systems, Android apps don't have a single entry
point (there's no main() function).
Because the system runs each app in a separate process with file permissions that
restrict access to other apps, your app cannot directly activate a component from
another app. However, the Android system can. To activate a component in
another app, deliver a message to the system that specifies your intent to
start a particular component. The system then activates the component for you.
Activating components
Three of the four component types—activities, services, and
broadcast receivers—are activated by an asynchronous message called an intent.
Intents bind individual components to each other at runtime. You can think of them
as the messengers that request an action from other components, whether the component belongs
to your app or another.
An intent is created with an Intent object, which defines a message to
activate either a specific component (explicit intent) or a specific type of component
 (implicit intent).
For activities and services, an intent defines the action to perform (for example, to
 view or
send something) and may specify the URI of the data to act on, among other things that the
component being started might need to know. For example, an intent might convey a request for an
activity to show an image or to open a web page. In some cases, you can start an
activity to receive a result, in which case the activity also returns
the result in an Intent. For example, you can issue an intent to let
the user pick a personal contact and have it returned to you. The return intent includes a
URI pointing to the chosen contact.
For broadcast receivers, the intent simply defines the
announcement being broadcast. For example, a broadcast to indicate the device battery is low
includes only a known action string that indicates battery is low.
Unlike activities, services, and broadcast receivers, content providers are not activated
 by intents. Rather, they are
activated when targeted by a request from a ContentResolver. The content
resolver handles all direct transactions with the content provider so that the component that's
performing transactions with the provider doesn't need to and instead calls methods on the
ContentResolver object. This leaves a layer of abstraction between the
content provider and the component requesting information (for security).
There are separate methods for activating each type of component:

You can start an activity or give it something new to do by
passing an Intent to startActivity() or startActivityForResult()
(when you want the activity to return a result).
With Android 5.0 (API level 21) and later, you can use
  the JobScheduler class to schedule actions.
    For earlier Android versions, you can start
  a service (or give new instructions to an ongoing service) by
passing an Intent to startService(). You can bind to the service by passing an Intent to
bindService(). 
You can initiate a broadcast by passing an Intent to methods such as
sendBroadcast(), sendOrderedBroadcast(), or sendStickyBroadcast().
You can perform a query to a content provider by calling query() on a ContentResolver.

For more information about using intents, see the Intents and
Intent Filters document.
 The following documents provide more information about activating specific components:
 Activities,
 Services,
 BroadcastReceiver, and
 Content Providers.
The manifest file
Before the Android system can start an app component, the system must know that the
component exists by reading the app's manifest file, AndroidManifest.xml.
 Your app must declare all its components in this file, which must be at the root of the
 app project directory.
The manifest does a number of things in addition to declaring the app's components,
such as the following:

Identifies any user permissions the app requires, such as Internet access or
read-access to the user's contacts.
Declares the minimum
  API Level
required by the app, based on which APIs the app uses.
Declares hardware and software features used or required by the app, such as a camera,
bluetooth services, or a multitouch screen.
Declares API libraries the app needs to be linked against (other than the Android framework
APIs), such as the 
Google Maps library.

Declaring components
The primary task of the manifest is to inform the system about the app's components. For
example, a manifest file can declare an activity as follows: 

<?xml version="1.0" encoding="utf-8"?>
<manifest ... >
    <application android:icon="@drawable/app_icon.png" ... >
        <activity android:name="com.example.project.ExampleActivity"
                  android:label="@string/example_label" ... >
        </activity>
        ...
    </application>
</manifest>
In the <application>
element, the android:icon attribute points to resources for an icon that identifies the
app.
In the <activity> element,
the android:name attribute specifies the fully qualified class name of the Activity subclass and the android:label attribute specifies a string
to use as the user-visible label for the activity.
You must declare all app components using the following elements:

<activity> elements
for activities.
<service> elements for
services.
<receiver> elements
for broadcast receivers.
<provider> elements
for content providers.

Activities, services, and content providers that you include in your source but do not declare
in the manifest are not visible to the system and, consequently, can never run.  However,
broadcast
receivers can be either declared in the manifest or created dynamically in code as
BroadcastReceiver objects and registered with the system by calling
registerReceiver().
For more about how to structure the manifest file for your app, see The AndroidManifest.xml File
documentation. 
Declaring component capabilities
As discussed above, in Activating components, you can use an
Intent to start activities, services, and broadcast receivers.



You can use an Intent
 by explicitly naming the target component (using the component class name) in the intent.
 You can also use an implicit intent, which
describes the type of action to perform and, optionally, the data upon which you’d like to
perform the action. The implicit intent allows the system to find a component on the device
 that can perform the
action and start it. If there are multiple components that can perform the action described by the
intent, the user selects which one to use.
Caution: If you use an intent to start a
 Service, ensure that your app is secure by using an
 explicit
intent. Using an implicit intent to start a service is a
security hazard because you cannot be certain what service will respond to the intent,
and the user cannot see which service starts. Beginning with Android 5.0 (API level 21), the system
throws an exception if you call bindService()
with an implicit intent. Do not declare intent filters for your services. 
The system identifies the components that can respond to an intent by comparing the
intent received to the intent filters provided in the manifest file of other apps on
the device.
When you declare an activity in your app's manifest, you can optionally include
intent filters that declare the capabilities of the activity so it can respond to intents
from other apps. You can declare an intent filter for your component by
adding an <intent-filter> element as a child of the component's declaration element.
For example, if you build an email app with an activity for composing a new email, you can
declare an intent filter to respond to "send" intents (in order to send a new email),
 as shown in the following example:

<manifest ... >
    ...
    <application ... >
        <activity android:name="com.example.project.ComposeEmailActivity">
            <intent-filter>
                <action android:name="android.intent.action.SEND" />
                <data android:type="*/*" />
                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter>
        </activity>
    </application>
</manifest>

If another app creates an intent with the ACTION_SEND action and passes it to
 startActivity(), the system may start your activity so the user can draft and send an
email.
For more about creating intent filters, see the Intents and Intent Filters document.

Declaring app requirements
There are a variety of devices powered by Android and not all of them provide the
same features and capabilities. To prevent your app from being installed on devices
that lack features needed by your app, it's important that you clearly define a profile for
the types of devices your app supports by declaring device and software requirements in your
manifest file. Most of these declarations are informational only and the system does not read
them, but external services such as Google Play do read them in order to provide filtering
for users when they search for apps from their device.
For example, if your app requires a camera and uses APIs introduced in Android 2.1 (API Level 7),
you must declare these as requirements in your manifest file as shown in the following example:

<manifest ... >
    <uses-feature android:name="android.hardware.camera.any"
                  android:required="true" />
    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="19" />
    ...
</manifest>

With the declarations shown in the example, devices that do not have a
 camera or have an
Android version lower than 2.1 cannot install your app from Google Play.
 However, you can declare that your app uses the camera, but does not
require it. In that case, your app must set the required
attribute to false and check at runtime whether
the device has a camera and disable any camera features as appropriate.
More information about how you can manage your app's compatibility with different devices
is provided in the Device Compatibility
document.
App resources
An Android app is composed of more than just code—it requires resources that are
separate from the source code, such as images, audio files, and anything relating to the visual
presentation of the app. For example, you can define animations, menus, styles, colors,
and the layout of activity user interfaces with XML files. Using app resources makes it easy
to update various characteristics of your app without modifying code. Providing
sets of alternative resources enables you to optimize your app for a variety of
device configurations, such as different languages and screen sizes.
For every resource that you include in your Android project, the SDK build tools define a unique
integer ID, which you can use to reference the resource from your app code or from
other resources defined in XML. For example, if your app contains an image file named
logo.png (saved in the res/drawable/ directory), the SDK tools generate
a resource ID named R.drawable.logo. This ID maps to an app-specific integer, which
you can use to reference the image and insert it in your user interface.
One of the most important aspects of providing resources separate from your source code
is the ability to provide alternative resources for different device
configurations. For example, by defining UI strings in XML, you can translate
 the strings into other
languages and save those strings in separate files. Then Android applies the
 appropriate language strings
to your UI based on a language qualifier
that you append to the resource directory's name (such as res/values-fr/ for French string
values) and the user's language setting.
Android supports many different qualifiers for your alternative resources. The
qualifier is a short string that you include in the name of your resource directories in order to
define the device configuration for which those resources should be used. For
example, you should create different layouts for your activities, depending on the
device's screen orientation and size. When the device screen is in portrait
orientation (tall), you might want a layout with buttons to be vertical, but when the screen is in
landscape orientation (wide), the buttons could be aligned horizontally. To change the layout
depending on the orientation, you can define two different layouts and apply the appropriate
qualifier to each layout's directory name. Then, the system automatically applies the appropriate
layout depending on the current device orientation.
For more about the different kinds of resources you can include in your application and how to
create alternative resources for different device configurations, read Providing Resources. To
learn more about best practices and designing robust, production-quality apps,
see Guide to App Architecture.


Continue reading about:

Intents and Intent Filters

How to use the Intent APIs to
    activate app components, such as activities and services, and how to make your app components
    available for use by other apps.
Activities
How to create an instance of the Activity class,
    which provides a distinct screen in your application with a user interface.
Providing Resources
How Android apps are structured to separate app resources from the
   app code, including how you can provide alternative resources for specific device
   configurations.
    



You might also be interested in:

Device Compatibility
How Android works on different types of devices and an introduction
    to how you can optimize your app for each device or restrict your app's availability
    to different devices.
System Permissions
How Android restricts app access to certain APIs with a permission
    system that requires the user's consent for your app to use those APIs.





Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated February 7, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
