Back up user data with Auto Backup  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Back up user data with Auto Backup
  


Auto Backup for Apps automatically backs up a user's data from apps that
target and run on Android 6.0 (API level 23) or later. Android preserves app
data by uploading it to the user's Google Drive—where it's protected by the
user's Google Account credentials. The amount of data is limited to 25MB per
user of your app and there's no charge for storing backup data. Your app can
customize the backup process or opt out by disabling
backups.
For an overview of Android's backup options and guidance about which data
you should back up and restore, see the data backup
overview.
For a walk-through on setting up Auto Backup, also try the Auto Backup for
Android
Codelab.
Files that are backed up

  By default, Auto Backup includes files in most of the directories that
  are assigned to your app by the system:


Shared preferences files.
  
Files saved to your app's internal storage, accessed by
    getFilesDir() or
    getDir(String, int).
  
Files in the directory returned by getDatabasePath(String), which also includes
  files created with the SQLiteOpenHelper
  class.
  
Files on external storage in the directory returned by getExternalFilesDir(String).
  


  Auto Backup excludes files in directories returned by getCacheDir(), getCodeCacheDir(), or getNoBackupFilesDir(). The files saved in these
  locations are only needed temporarily, or are intentionally excluded from
  backup operations.


  You can configure your app to include and exclude particular files. For
  more information, see the Include and exclude
  files section.


Note: Android does not treat the configuration of
  components as user data. If your app enables or disables specific components
  in its manifest while it is running, do not expect AutoBackup to save and
  restore the configuration. To preserve the configuration state, save it in
  Shared Preferences and recover Shared Preferences on restore. If you want
  your app to save its state, store state in
  Shared Preferences
  and recover Shared Preferences on restore.
Backup location
Backup data is stored in a private folder in the user's Google Drive account,
limited to 25MB per app. The saved data does not count towards the user's
personal Google Drive quota. Only the most recent backup is stored. When a
backup is made, the previous backup (if one exists) is deleted. The backup data
can't be read by the user or other apps on the device.
Users can see a list of apps that have been backed up in the Google Drive
Android app. On an Android-powered device, users can find this list in the Drive
app's navigation drawer under Settings > Backup and reset > App data.

  Backups from each device-setup-lifetime are stored in separate datasets
  as shown in the following examples:


If the user owns two devices, then a backup dataset exists for each
  device.
  
If the user factory resets a device and then sets up the device with
  the same account, the backup is stored in a new dataset. Obsolete
  datasets are automatically deleted after a period of inactivity.
  

Caution: If the amount of data is over 25MB, the system calls
onQuotaExceeded()
and doesn't back up data to the cloud. The system periodically checks whether
the amount of data later falls under the 25MB threshold and continues Auto
Backup when it does.
Backup schedule
Backups occur automatically when all of the following conditions are met:

The user has enabled backup on the device. In Android 9, this setting is in
Settings > System > Backup.
At least 24 hours have elapsed since the last backup.
The device is idle.
The device is connected to a Wi-Fi network (if the device user hasn't opted in
to mobile-data backups).

In practice, these conditions occur roughly every night but a device might never
back up (for example, if it never connects to a network). To conserve network
bandwidth, the upload takes place only if the app data has changed.

  During Auto Backup, the system shuts down the app to make sure it is no
  longer writing to the file system. By default, the backup system ignores
  apps that are running in the foreground because users would notice their
  apps being shut down. You can override the default behavior by setting the
  
backupInForeground attribute to true.


  To simplify testing, Android includes tools that let you manually
  initiate a backup of your app. For more information, see
  Test backup and restore.

Restore schedule

  Data is restored whenever the app is installed, either from the Play
  store, during device setup (when the system installs previously installed
  apps), or from running adb install. The restore operation occurs after
  the APK is installed, but before the app is available to be launched by
  the user.


  During the initial device setup wizard, the user is shown a list of
  available backup datasets and is asked which one to restore the data
  from. Whichever backup dataset is selected becomes the ancestral dataset
  for the device. The device can restore from either its own backups or the
  ancestral dataset. The device prioritize its own backup if backups from
  both sources are available. If the user didn't go through the device
  setup wizard, then the device can restore only from its own backups.


  To simplify testing, Android includes tools that let you manually
  initiate a restore of your app. For more information, see
  Test backup and restore.

Enable and disable backup
Apps that target Android 6.0 (API level 23) or higher automatically participate
in Auto Backup. In your app manifest file, set the boolean value
android:allowBackup
to enable or disable backup. The default value is true but to make your
intentions clear, we recommend explicitly setting the attribute in your manifest
as shown below:
<manifest ... >
    ...
    <application android:allowBackup="true" ... >
        ...
    </application>
</manifest>

You can disable backups by setting android:allowBackup to false. You might
want to do this if your app can recreate its state through some other mechanism
or if your app deals with sensitive information that Android shouldn't back up.
Include and exclude files

  By default, the system backs up almost all app data. For more
  information, see Files that are backed up. This
  section shows you how to define custom XML rules to control what gets
  backed up.


In AndroidManifest.xml, add the
  
android:fullBackupContent attribute to the
  <application> element. This attribute points to an
  XML file that contains backup rules. For example:


<application ...
    android:fullBackupContent="@xml/my_backup_rules">
</application>


Create an XML file called my_backup_rules.xml in the
res/xml/ directory. Inside the file, add rules with the
<include> and <exclude> elements.
The following sample backs up all shared preferences except
device.xml:

  
<?xml version="1.0" encoding="utf-8"?>
<full-backup-content>
    <include domain="sharedpref" path="."/>
    <exclude domain="sharedpref" path="device.xml"/>
</full-backup-content>



XML config syntax

  The XML syntax for the configuration file is shown below:


<full-backup-content>
    <include domain=["file" | "database" | "sharedpref" | "external" | "root"]
    path="string"
    requiredFlags=["clientSideEncryption" | "deviceToDeviceTransfer"] />
    <exclude domain=["file" | "database" | "sharedpref" | "external" | "root"]
    path="string" />
</full-backup-content>


  Inside the <full-backup-content> tag, you can define
  <include> and <exclude> elements:



<include> - Specifies a file or folder to backup. By
    default, Auto Backup includes almost all app files. If you specify an
    <include> element, the system no longer includes any files by
    default and backs up only the files specified. To include
    multiple files, use multiple <include> elements.
    
Note: Files in directories returned by getCacheDir(),
      getCodeCacheDir(), or getNoBackupFilesDir()
      are always excluded even if you try to include them.
    


<exclude> - Specifies a file or folder to exclude
    during backup. Here are some files that are typically excluded from
    backup:
    
Files that have device specific identifiers, either issued by a
      server or generated on the device. For example,
      
      Google Cloud Messaging (GCM) needs to generate a registration token
      every time a user installs your app on a new device. If the old
      registration token is restored, the app may behave unexpectedly.
      
Account credentials or other sensitive information. Consider
      asking the user to reauthenticate the first time they launch a
      restored app rather than allowing for storage of such information in
      the backup.
      
Files related to app debugging, such as
      instant run files.
      To exclude instant run files, add the rule <exclude
      domain="file" path="instant-run"/>

Large files that cause the app to exceed the 25MB backup quota.
      




Note: If your configuration file specifies both
  elements, then the backup contains everything captured by the
  <include> elements minus the resources named in the
  <exclude> elements. In other words,
  <exclude> takes precedence.


  Each element must include the following two attributes:



domain - specifies the location of resource. Valid values
    for this attribute include the following:
    

root - the directory on the filesystem where all
        private files belonging to this app are stored.
      

file - directories returned by getFilesDir().
      

database - directories returned by getDatabasePath().
        Databases created with SQLiteOpenHelper are stored here.
      

sharedpref - the directory where SharedPreferences are stored.
      

external the directory returned by getExternalFilesDir()




Note: You cannot back up files outside of these locations.
  

path: Specifies a file or folder to include in or exclude
    from backup. Note that:
    
This attribute does not support wildcard or regex syntax.
      
You can use . to reference the current directory,
      however, you cannot reference the parent directory ..
      for security reasons.
      
If you specify a directory, then the rule applies to all files in
      the directory and recursive sub-directories.
      



The include element can also contain the requiredFlags attribute, which the
section describing how to define conditional requirements for
backup section discusses in more detail.
Define device conditions required for backup
If your app saves sensitive information on the device, you can specify
conditions under which your app's data is included in the user's
backup. You can add the following conditions in Android 9 (API level 28) or
higher:

clientSideEncryption: The user's backup is encrypted with a client-side
secret. This form of encryption is enabled on devices running Android 9 or
higher as long as the user has enabled backup in Android 9 or
higher  and has set a
screen lock (PIN,
pattern, or password) for their device.
deviceToDeviceTransfer: The user is transferring their backup to another
device that supports local device-to-device
transfer (for example,
Google Pixel).

If you've upgraded your development devices to Android 9, you need to disable
and then re-enable data backup after upgrading. This is because Android only
encrypts backups with a client-side secret after informing users in Settings or
the Setup Wizard.
To declare the inclusion conditions, set the requireFlags attribute to the
desired value or values in your in the <include> elements within your set of
backup rules:
my_backup_rules.xml

<?xml version="1.0" encoding="utf-8"?>
<full-backup-content>
    <!-- App data isn't included in user's backup
         unless client-side encryption is enabled. -->
    <include domain="file" path="."
             requireFlags="clientSideEncryption" />
<full-backup-content>

Note: Because adding requirements to the XML prevents backups from working in
previous Android versions, you need to provide alternative
resources for
backups being used on devices running Android 8.1 (API level 27) or lower.
If your app implements a key-value backup
system, or if you implement
BackupAgent yourself,
you can also apply these conditional requirements to your backup logic by
performing a bitwise comparison between a
BackupDataOutput object's
set of transport flags and your custom backup agent's
FLAG_CLIENT_SIDE_ENCRYPTION_ENABLED
or FLAG_DEVICE_TO_DEVICE_TRANSFER
flags.
The following code snippet shows an example use of this method:

Kotlin

class MyCustomBackupAgent : BackupAgent() {
    override fun onBackup(oldState: ParcelFileDescriptor?,
            data: BackupDataOutput?, newState: ParcelFileDescriptor?) {
        if (data != null) {
            if ((data.transportFlags and
                    FLAG_CLIENT_SIDE_ENCRYPTION_ENABLED) != 0) {
                // Client-side backup encryption is enabled.
            }

            if ((data.transportFlags and FLAG_DEVICE_TO_DEVICE_TRANSFER) != 0) {
                // Local device-to-device transfer is enabled.
            }
        }
    }

    // Implementation of onRestore() here.
}

Java

public class MyCustomBackupAgent extends BackupAgent {
    @Override
    public void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
            ParcelFileDescriptor newState) throws IOException {
        if ((data.getTransportFlags() &
                FLAG_CLIENT_SIDE_ENCRYPTION_ENABLED) != 0) {
            // Client-side backup encryption is enabled.
        }

        if ((data.getTransportFlags() &
                FLAG_DEVICE_TO_DEVICE_TRANSFER) != 0) {
            // Local device-to-device transfer is enabled.
        }
    }

    // Implementation of onRestore() here.
}



Implement BackupAgent

  Apps that implement Auto Backup do not need to implement a BackupAgent. However, you can optionally implement a
  custom BackupAgent. Typically, there are two
  reasons for doing this:


You want to receive notification of backup events such as, onRestoreFinished() or onQuotaExceeded(long, long). These
  callback methods are executed even if the app is not running.
  
You can't easily express the set of files you want to backup with XML
  rules. In these rare cases, you can implement a BackupAgent that
  overrides onFullBackup(FullBackupDataOutput) to
  store what you want. To retain the system's default implementation, call
  the corresponding method on the superclass with
  super.onFullBackup().
  


  If you implement a BackupAgent, by default the system expects your app to
  perform key/value backup and
  restore. To use the file-based Auto Backup instead, set the
  
android:fullBackupOnly
  attribute to true in your app's manifest.


  During auto backup and restore operations, the system launches the app in
  a restricted mode to both prevent the app from accessing files that could
  cause conflicts and let the app execute callback methods in its BackupAgent. In this restricted mode, the app's main
  activity is not automatically launched, its
  Content Providers
  are not initialized, and the base-class Application
  is instantiated instead of any subclass declared in the app's
  manifest.


Caution: To avoid errors, make sure that the parts of your app
  that execute in the restricted mode (mostly your BackupAgent) do not access content providers in the
  same app or attempt to cast the Application object.
  If you cannot avoid those patterns, then consider implementing
  Key/Value backup or
  disabling backup entirely.

Your BackupAgent must implement the
  abstract methods onBackup() and onRestore(), which are used for
  key-value backup. But if
  you don't want to perform key-value backup, you can just leave your
  implementation of those methods blank.


  For more information, see
  Extending
  BackupAgent.



Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 31, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
