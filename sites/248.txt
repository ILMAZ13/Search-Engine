Download modules with the Play Core Library  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Download modules with the Play Core Library
  


With Google Play’s Dynamic Delivery, your app can download dynamic feature
modules on demand to devices running Android 5.0 (API level 21) and higher. Your
app simply needs to call APIs in the Play Core Library to download and install
those modules as required, and the Google Play Store pushes only the code and
resources needed for that module to the device. You can also use this API to
download on demand modules for your Android Instant Apps.
To learn how to first add dynamic feature modules to your project and
configure them to be available on demand, read
Create a dynamic feature module.
Additionally, after you’ve read through this guide, see the API in action by
trying the Play Core API sample app.
Note: Downloading modules on demand is in beta. If you experience any issues,
please report a bug.
Include the Play Core Library in your project
Before you can start using the Play Core Library, you need to first import it
into your app module as a Gradle dependency, as shown below:

// In your app’s build.gradle file:
...
dependencies {
    // This dependency is downloaded from the Google’s Maven repository.
    // So, make sure you also include that repository in your project's build.gradle file.
    implementation 'com.google.android.play:core:1.3.6'
    ...
}

Request an on demand module
When your app needs to use a dynamic feature module, it can request one while
it's in the foreground through the
SplitInstallManager
class. When making a
request, your app needs to specify the name of the module as defined by the
split element in the target module’s manifest. When you
create a dynamic feature module
using Android Studio, the build system uses the Module name you provide
to inject this property into the module's manifest at compile time.
For more information, read about the
Dynamic feature module manifests.
For example, consider an app that has an on demand module to capture and send
picture messages using the device’s camera, and this on demand module
specifies split="pictureMessages" in its manifest. The
following sample uses SplitInstallManager to request the pictureMessages
module (along with an additional module for some promotional filters):

// Creates an instance of SplitInstallManager.
SplitInstallManager splitInstallManager =
    SplitInstallManagerFactory.create(context);

// Creates a request to install a module.
SplitInstallRequest request =
    SplitInstallRequest
        .newBuilder()
        // You can download multiple on demand modules per
        // request by invoking the following method for each
        // module you want to install.
        .addModule("pictureMessages")
        .addModule("promotionalFilters")
        .build();

splitInstallManager
    // Submits the request to install the module through the
    // asynchronous startInstall() task. Your app needs to be
    // in the foreground to submit the request.
    .startInstall(request)
    // You should also be able to gracefully handle
    // request state changes and errors. To learn more, go to
    // the section about how to Monitor the request state.
    .addOnSuccessListener(sessionId -> { ... })
    .addOnFailureListener(exception -> { ... });

When your app requests an on demand module, the Play Core Library employs a
“fire-and-forget” strategy. That is, it sends the request to download the
module to the platform, but it does not monitor whether the installation
succeeded. To move the user journey forward after
installation or gracefully handle errors, make sure you monitor the request
state.

Note: It's okay to request a
dynamic feature module that’s already installed on the device. The API
instantly considers the request as completed if it detects the module is already
installed. Additionally, after a module is installed, Google Play keeps it updated
automatically. That is, when you upload a new version of your app bundle, the platform
updates all installed APKs that belong to your app. For more information, read
Manage app updates.

To have immediate access to the module's code and resources, your app needs to
enable SplitCompat. Note that SplitCompat is not
required for Android Instant Apps— they always have immediate access to feature
modules.
Defer installation of on demand modules
If you do not need your app to immediately download and install an on demand
module, you can defer installation for when the app is in the background. For
example, if you want to preload some promotional material for a later launch of
your app.
You can specify a module to be download later using the
deferredInstall()
method, as shown below. And, unlike
SplitInstallManager.startInstall(),
your app does not need to be in the foreground to initiate a request for a
deferred installation.
// Requests an on demand module to be downloaded when the app enters
// the background. You can specify more than one module at a time.
splitInstallManager.deferredInstall(Arrays.asList("promotionalFilters"));

Requests for deferred installs are best-effort and you cannot track their
progress. So, before trying to access a module you have specified for deferred
installation, you should
check that the module has been installed. If you
need the module to be available immediately, instead use
SplitInstallManager.startInstall() to request it, as shown in the previous
section.
Monitor the request state
To be able to update a progress bar, fire an intent after
installation, or gracefully handle a request error, you need to listen for
state updates from the asynchronous SplitInstallManager.startInstall() task.
Before you can start receiving updates for your install request, register a
listener and get the session ID for the request, as shown below.

// Initializes a variable to later track the session ID for a given request.
int mySessionId = 0;

// Creates a listener for request status updates.
SplitInstallStateUpdatedListener listener = state -> {
    if (state.sessionId() == mySessionId) {
      // Read the status of the request to handle the state update.
    }
};

// Registers the listener.
splitInstallManager.registerListener(listener);

...

splitInstallManager
    .startInstall(request)
    // When the platform accepts your request to download
    // an on demand module, it binds it to the following session ID.
    // You use this ID to track further status updates for the request.
    .addOnSuccessListener(sessionId -> { mySessionId = sessionId; })
    // You should also add the following listener to handle any errors
    // processing the request.
    .addOnFailureListener(exception -> {
        // Handle request errors.
    });

// When your app no longer requires further updates, unregister the listener.
splitInstallManager.unregisterListener(listener);

Handle request errors
You should gracefully handle failures downloading or installing a module
using addOnFailureListener(), as shown below:

splitInstallManager
    .startInstall(request)
    .addOnFailureListener(exception -> {
        switch (((SplitInstallException) exception).getErrorCode()) {
            case SplitInstallErrorCode.NETWORK_ERROR:
                // Display a message that requests the user to establish a
                // network connection.
                break;
            case SplitInstallErrorCode.ACTIVE_SESSIONS_LIMIT_EXCEEDED:
                checkForActiveDownloads();
            ...
    });

void checkForActiveDownloads() {
    splitInstallManager
        // Returns a SplitInstallSessionState object for each active session as a List.
        .getSessionStates( states -> {
            // Check for active sessions.
            for (SplitInstallSessionState state : states) {
                if (state.status() == SplitInstallSessionStatus.DOWNLOADING) {
                    // Cancel the request, or request a deferred installation.
                }
            }
        });
}

The table below describes the error states your app may need to handle:


Error code Description Suggested action


ACTIVE_SESSIONS_LIMIT_EXCEEDED
The request is rejected because there is at least one existing
    request that is currently downloading.
Check if there are any requests that are still downloading, as shown
    in the sample above.
    


MODULE_UNAVAILABLE
Google Play is unable to find the requested module based
    on the current installed version of the app, device, and user’s Google Play
      account.
If the user does not have access to the module, notify them.


INVALID_REQUEST
Google Play received the request, but the request
    is not valid.
Verify that the information included in the request
    is complete and accurate.


SESSION_NOT_FOUND
A session for a given session ID was not found.
If you’re trying to monitor the state of a request
    by its session ID, make sure that the session ID is correct.


API_NOT_AVAILABLE
The Play Core Library is not supported on the current device.
    That is, the device is not able to download and install
    features on demand.
For devices running Android 4.4 (API level 20) or lower, you should
      include dynamic feature modules at install time using the
      dist:fusing manifest property. To learn more, read about the
      Dynamic feature module manifest.
    


ACCESS_DENIED
The app is unable to register the request because of insufficient permissions.
This typically occurs when the app is in the background.
    Attempt the request when the app returns to the foreground.


NETWORK_ERROR
The request failed because of a network error.
Prompt the user to either establish a network connection
    or change to a different network.


INCOMPATIBLE_WITH_EXISTING_SESSION
The request contains one or more modules that have already been
    requested but have not yet been installed.
Either create a new request that does not include modules that your
    app has already requested, or wait for all currently requested modules
    to finish installing before retrying the request.
    
      Keep in mind, requesting a module that has already been
      installed does not resolve in an error.
    



SERVICE_DIED
The service responsible for handling the request has died.
Retry the request.
    
      This error code is be exposed as an update to your
      SplitInstallStateUpdatedListener with status
      FAILED and session ID -1.
    



If a user requests downloading an on demand module and an error occurs,
consider displaying a dialog that provides two options for the user: Try
again (which attempts the request again) and Cancel (which abandons the
request). For additional support, you should also provide Help link that
directs users to the
Google Play Help center.
Handle state updates
After you register a listener and record the session ID for your request,
use StateUpdatedListener.onStateUpdate()
to handle state changes, as shown below.

@Override
public void onStateUpdate(SplitInstallSessionState state) {
    if (state.status() == SplitInstallSessionStatus.FAILED
        && state.errorCode() == SplitInstallErrorCode.SERVICE_DIES) {
       // Retry the request.
       return;
    }
    if (state.sessionId() == mySessionId) {
        switch (state.status()) {
            case SplitInstallSessionStatus.DOWNLOADING:
              int totalBytes = state.totalBytesToDownload();
              int progress = state.bytesDownloaded();
              // Update progress bar.
              break;

            case SplitInstallSessionStatus.INSTALLED:

              // After a module is installed, you can start accessing its content or
              // fire an intent to start an activity in the installed module.
              // For other use cases, see access code and resources from installed modules.

              // If the request is an on demand module for an Android Instant App
              // running on Android 8.0 (API level 26) or higher, you need to
              // update the app context using the SplitInstallHelper API.
        }
    }
}

The possible states for your install request are described in the table below.


Request state Description Suggested action


PENDING
The request has been accepted and the
    download should start soon.
Initialize UI components, such as a progress bar,
    to provide the user feedback on the download.


REQUIRES_USER_CONFIRMATION
The download requires user confirmation.
    This is most likely due to the size of the
    download being larger than 10 MB.
Prompt the user to accept the download request.
      To learn more, go to the section about how to
      obtain user confirmation.


DOWNLOADING
Download is in progress.
If you provide a progress bar for the download, use
    the SplitInstallSessionState.bytesDownloaded()
    and SplitInstallSessionState.totalBytesToDownload()
    methods to update the UI (see the code sample above this table).


DOWNLOADED
The device has downloaded the module but installation has no yet begun.
    
Apps should enable SplitCompat
      to have immediate access to downloaded modules and avoid seeing this state.
      Otherwise, the download transitions to INSTALLED, and your
    app access to its code and resources, only at some point after the app
      enters the background.
    


INSTALLING
The device is currently installing the module.
Update the progress bar. This state is typically short.


INSTALLED
The module is installed on the device.
Access code and resource in the module
      to continue the user journey.
    If the module is for an Android Instant App running on Android 8.0 (API level 26)
      or higher, you need to use splitInstallHelper to
      update app components with the new module.
    


FAILED
The request failed before the module was
    installed on the device.
Prompt the user to either retry the request or cancel it.


CANCELING
The device is in the process of cancelling the request.
To learn more, go to the section about how to
      cancel an install request.


CANCELED
The request has been cancelled.



Obtain user confirmation
In some cases, Google Play may require user confirmation before satisfying a
download request. For example, if a request requires a large download and the
device is using mobile data. In such cases, the status for the request reports
REQUIRES_USER_CONFIRMATION, and your app needs to obtain user confirmation
before the device is able to download and install the modules in the request. To
obtain confirmation, your app should prompt the user as follows:
@Override void onSessionStateUpdate(SplitInstallSessionState state) {
    if (state.status() == SplitInstallSessionStatus.REQUIRES_USER_CONFIRMATION) {
        // Displays a dialog for the user to either “Download”
        // or “Cancel” the request.
        startIntentSender(
            state.resolutionIntent().getIntentSender(),
            /* fillInIntent= */ null,
            /* flagsMask= */ 0,
            /* flagsValues= */ 0,
            /* extraFlags= */ 0);
    }
    ...
 }

The status for the request is updated depending on the user response:

If the user selects “Download”, the request status changes to
PENDING and the download proceeds.
If the user selects “Cancel”, the request status changes to
CANCELED.
If the user does not make a selection before the dialog is destroyed,
the request status remains as REQUIRES_USER_CONFIRMATION.
Your app can prompt the user again to complete the request.

Cancel an install request
If your app needs to cancel a request before it is installed, it can invoke
the cancelInstall() method using the request’s session ID, as shown below.

SplitInstallManager
    // Cancels the request for the given session ID.
    .cancelInstall(mySessionId)

Immediately access modules
Your app needs to enable the
SplitCompat Library
in order to immediately access code and resources from a downloaded module—that
is, before an app restart. In addition, you need to enable SplitCompat for
any activity that your app loads from a feature module.
You should note, however, the platform experiences the following
restrictions to accessing contents of a module prior to an app restart:

The platform can not apply any new manifest entries introduced by the module.
The platform can not access the module’s resources for system UI components,
such as notifications. If you need to use such resources immediately, consider
including those resource in the base module of your app.

You can enable SplitCompat for your app using one of the methods described below.
Declare SplitCompatApplication in the manifest
The simplest way to enable SplitCompat is to declare SplitCompatApplication
as the Application subclass in
your app’s manifest, as shown below:
<application
    ...
    android:name="com.google.android.play.core.splitcompat.SplitCompatApplication">
</application>

After the app is installed on a device, you can access code and resources from
downloaded dynamic feature modules automatically.
Invoke SplitCompat at runtime
You can also enable SplitCompat in specific activities or services at runtime.
Enabling SplitCompat this way is required to launch activities included in
feature modules immediately after module installation. To do this, override
attachBaseContext as seen below.
If you have a custom Application class,
have it instead extend
SplitCompatApplication
in order to enable SplitCompat for your app, as shown below:
public class MyApplication extends SplitCompatApplication {
    ...
}

SplitCompatApplication simply overrides ContextWrapper.attachBaseContext()
to include SplitCompat.install(Context applicationContext). If you don’t
want your Application class to
extend SplitCompatApplication, you can override the attachBaseContext()
method manually, as follows:
@Override
protected void attachBaseContext(Context base) {
    super.attachBaseContext(base);
    // Emulates installation of future on demand modules using SplitCompat.
    SplitCompat.install(this);
}

If your on demand module is compatible
with both instant apps and installed apps, you can invoke SplitCompat
conditionally, as follows:
@Override
protected void attachBaseContext(Context base) {
    super.attachBaseContext(base);
    if (!InstantApps.isInstantApp(this)) {
        SplitCompat.install(this);
    }
}

Access code and resources from installed modules
In most cases, after a request for an on demand module reports as INSTALLED,
you can start using its code and resources as if it were a part of the base APK.
However, accessing code and resources from a new module requires a refreshed app
Context. A context that your app creates
before installing a module (for example, one that's already stored in a
variable) does not contain the content of the new module. But a fresh context
does—this can be obtained, for example, using
java
createPackageContext.
If you access an installed module's content by
firing an intent to launch a component,
that component's context also contains the content of the new module, provided
that the target component enables SplitCompat.

// Generate a new context as soon as a request for a new module
// reports as INSTALLED.
public void onStateUpdate(SplitInstallSessionState state) {
    if (state.sessionId() == mySessionId) {
        switch (state.status()) {
            ...
            case SplitInstallSessionStatus.INSTALLED:
                Context newContext = context.createPackageContext(context.getPackageName(), 0);
                // If you use AssetManager to access your app’s raw asset files, you’ll need
                // to generate a new AssetManager instance from the updated context.
                AssetManager am = newContext.getAssets();
        }
    }
}

Android Instant Apps on Android 8.0 and higher
When requesting an on demand module for an Android Instant App, an app restart
isn’t required, regardless of the version of Android the device is using.
However, on Android 8.0 (API level 26) and higher, when such a
request reports as INSTALLED, you need to update the app with the
context of the new module through a call to
SplitInstallHelper.updateAppInfo(Context context).
Otherwise, the app is not yet aware of the module’s code
and resources. After updating the app’s metadata, you should load the module’s
contents during the next main thread event by invoking a new
Handler, as shown below:

@Override
public void onStateUpdate(SplitInstallSessionState state) {
    if (state.sessionId() == mySessionId) {
        switch (state.status()) {
            ...
            case SplitInstallSessionStatus.INSTALLED:
            // You need to perform the following only for Android Instant Apps
            // running on Android 8.0 (API level 26) and higher.
            if (BuildCompat.isAtLeastO()) {
                // Updates the app’s context with the code and resources of the
                // installed module.
                SplitInstallHelper.updateAppInfo(context);
                new Handler().post(new Runnable() {
                    @Override public void run() {
                        // Loads contents from the module using AssetManager
                        AssetManager am = context.getAssets();
                        ...
                    }
                });
            }
        }
    }
}

Load C/C++ libraries
If you want to load C/C++ libraries from a module that the device has already
downloaded, use
SplitInstallHelper.loadLibrary(Context context, String libName),
as shown below:
public void onStateUpdate(SplitInstallSessionState state) {
    if (state.sessionId() == mySessionId) {
        switch (state.status()) {
            case SplitInstallSessionStatus.INSTALLED:
                // Updates the app’s context as soon as a module is installed.
                Context newContext = context.createPackageContext(context.getPackageName(), 0);
                // To load C/C++ libraries from an installed module, use the following API
                // instead of System.load().
                SplitInstallHelper.loadLibrary(newContext, “my-cpp-lib”)
                ...
        }
    }
}


Manage installed modules
To check which dynamic feature modules are currently installed on the device,
you can call
SplitInstallManager.getInstalledModules(),
which returns a Set<String> of the names of the installed modules, as shown
below.
Note: If you're developing an Android Instant App, this section does not apply
to you.Set<String> installedModules = splitInstallManager.getInstalledModules();

Uninstall modules
You can request the device to uninstall modules by invoking
SplitInstallManager.deferredUninstall(List<String> moduleNames),
as shown below.
// Specifies two dynamic feature modules for deferred uninstall.
splitInstallManager.deferredUninstall(Arrays.asList("pictureMessages", "promotionalFilters"));

Module uninstalls do not occur immediately. That is,
the device uninstalls them in the background as needed to save storage space.
You can confirm that the device has
deleted a module by invoking
SplitInstallManager.getInstalledModules()
and inspecting the result, as described in the previous section.


Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 23, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
