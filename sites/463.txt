RenderScript Matrix Functions  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    RenderScript Matrix Functions
  



Overview
These functions let you manipulate square matrices of rank 2x2, 3x3, and 4x4.
They are particularly useful for graphical transformations and are compatible
with OpenGL.

 We use a zero-based index for rows and columns.  E.g. the last element of a
rs_matrix4x4 is found at (3, 3).

 RenderScript uses column-major matrices and column-based vectors.  Transforming
a vector is done by postmultiplying the vector, e.g. (matrix * vector),
as provided by rsMatrixMultiply().

 To create a transformation matrix that performs two transformations at once,
multiply the two source matrices, with the first transformation as the right
argument.  E.g. to create a transformation matrix that applies the
transformation s1 followed by s2, call rsMatrixLoadMultiply(&combined, &s2, &s1).
This derives from s2 * (s1 * v), which is (s2 * s1) * v.

 We have two style of functions to create transformation matrices:
rsMatrixLoadTransformation and rsMatrixTransformation.  The former
style simply stores the transformation matrix in the first argument.  The latter
modifies a pre-existing transformation matrix so that the new transformation
happens first.  E.g. if you call rsMatrixTranslate() on a matrix that already
does a scaling, the resulting matrix when applied to a vector will first do the
translation then the scaling.

Summary

Functions


rsExtractFrustumPlanes


      Compute frustum planes
    



rsIsSphereInFrustum


      Checks if a sphere is within the frustum planes
    



rsMatrixGet


      Get one element
    



rsMatrixInverse


      Inverts a matrix in place
    



rsMatrixInverseTranspose


      Inverts and transpose a matrix in place
    



rsMatrixLoad


      Load or copy a matrix
    



rsMatrixLoadFrustum


      Load a frustum projection matrix
    



rsMatrixLoadIdentity


      Load identity matrix
    



rsMatrixLoadMultiply


      Multiply two matrices
    



rsMatrixLoadOrtho


      Load an orthographic projection matrix
    



rsMatrixLoadPerspective


      Load a perspective projection matrix
    



rsMatrixLoadRotate


      Load a rotation matrix
    



rsMatrixLoadScale


      Load a scaling matrix
    



rsMatrixLoadTranslate


      Load a translation matrix
    



rsMatrixMultiply


      Multiply a matrix by a vector or another matrix
    



rsMatrixRotate


      Apply a rotation to a transformation matrix
    



rsMatrixScale


      Apply a scaling to a transformation matrix
    



rsMatrixSet


      Set one element
    



rsMatrixTranslate


      Apply a translation to a transformation matrix
    



rsMatrixTranspose


      Transpose a matrix place
    


Functions



rsExtractFrustumPlanes
: Compute frustum planes




void rsExtractFrustumPlanes(const rs_matrix4x4* viewProj, float4* left, float4* righ, float4* top, float4* bottom, float4* near, float4* far);

    Added in API level 24



void rsExtractFrustumPlanes(const rs_matrix4x4* viewProj, float4* left, float4* right, float4* top, float4* bottom, float4* near, float4* far);

    Removed from API level 24 and higher




 Parameters

viewProjMatrix to extract planes from.
leftLeft plane.
rightRight plane.
topTop plane.
bottomBottom plane.
nearNear plane.
farFar plane.
righ



 Computes 6 frustum planes from the view projection matrix






rsIsSphereInFrustum
: Checks if a sphere is within the frustum planes




bool rsIsSphereInFrustum(float4* sphere, float4* left, float4* right, float4* top, float4* bottom, float4* near, float4* far);

 



 Parameters

spherefloat4 representing the sphere.
leftLeft plane.
rightRight plane.
topTop plane.
bottomBottom plane.
nearNear plane.
farFar plane.



 Returns true if the sphere is within the 6 frustum planes.






rsMatrixGet
: Get one element




float rsMatrixGet(const rs_matrix2x2* m, uint32_t col, uint32_t row);

 


float rsMatrixGet(const rs_matrix3x3* m, uint32_t col, uint32_t row);

 


float rsMatrixGet(const rs_matrix4x4* m, uint32_t col, uint32_t row);

 



 Parameters

mMatrix to extract the element from.
colZero-based column of the element to be extracted.
rowZero-based row of the element to extracted.



 Returns one element of a matrix.

 Warning: The order of the column and row parameters may be unexpected.






rsMatrixInverse
: Inverts a matrix in place




bool rsMatrixInverse(rs_matrix4x4* m);

 



 Parameters

mMatrix to invert.



 Returns true if the matrix was successfully inverted.






rsMatrixInverseTranspose
: Inverts and transpose a matrix in place




bool rsMatrixInverseTranspose(rs_matrix4x4* m);

 



 Parameters

mMatrix to modify.



 The matrix is first inverted then transposed. Returns true if the matrix was
successfully inverted.






rsMatrixLoad
: Load or copy a matrix




void rsMatrixLoad(rs_matrix2x2* destination, const float* array);

 


void rsMatrixLoad(rs_matrix2x2* destination, const rs_matrix2x2* source);

 


void rsMatrixLoad(rs_matrix3x3* destination, const float* array);

 


void rsMatrixLoad(rs_matrix3x3* destination, const rs_matrix3x3* source);

 


void rsMatrixLoad(rs_matrix4x4* destination, const float* array);

 


void rsMatrixLoad(rs_matrix4x4* destination, const rs_matrix2x2* source);

 


void rsMatrixLoad(rs_matrix4x4* destination, const rs_matrix3x3* source);

 


void rsMatrixLoad(rs_matrix4x4* destination, const rs_matrix4x4* source);

 



 Parameters

destinationMatrix to set.
arrayArray of values to set the matrix to. These arrays should be 4, 9, or 16 floats long, depending on the matrix size.
sourceSource matrix.



 Set the elements of a matrix from an array of floats or from another matrix.

 If loading from an array, the floats should be in row-major order, i.e. the element a
row 0, column 0 should be first, followed by the element at
row 0, column 1, etc.

 If loading from a matrix and the source is smaller than the destination, the rest
of the destination is filled with elements of the identity matrix.  E.g.
loading a rs_matrix2x2 into a rs_matrix4x4 will give:

m00 m01 0.0 0.0
m10 m11 0.0 0.0
0.0 0.0 1.0 0.0
0.0 0.0 0.0 1.0






rsMatrixLoadFrustum
: Load a frustum projection matrix




void rsMatrixLoadFrustum(rs_matrix4x4* m, float left, float right, float bottom, float top, float near, float far);

 



 Parameters

mMatrix to set.
left
right
bottom
top
near
far



 Constructs a frustum projection matrix, transforming the box identified by
the six clipping planes left, right, bottom, top, near, far.

 To apply this projection to a vector, multiply the vector by the created
matrix using rsMatrixMultiply().






rsMatrixLoadIdentity
: Load identity matrix




void rsMatrixLoadIdentity(rs_matrix2x2* m);

 


void rsMatrixLoadIdentity(rs_matrix3x3* m);

 


void rsMatrixLoadIdentity(rs_matrix4x4* m);

 



 Parameters

mMatrix to set.



 Set the elements of a matrix to the identity matrix.






rsMatrixLoadMultiply
: Multiply two matrices




void rsMatrixLoadMultiply(rs_matrix2x2* m, const rs_matrix2x2* lhs, const rs_matrix2x2* rhs);

 


void rsMatrixLoadMultiply(rs_matrix3x3* m, const rs_matrix3x3* lhs, const rs_matrix3x3* rhs);

 


void rsMatrixLoadMultiply(rs_matrix4x4* m, const rs_matrix4x4* lhs, const rs_matrix4x4* rhs);

 



 Parameters

mMatrix to set.
lhsLeft matrix of the product.
rhsRight matrix of the product.



 Sets m to the matrix product of lhs * rhs.

 To combine two 4x4 transformaton matrices, multiply the second transformation matrix
by the first transformation matrix.  E.g. to create a transformation matrix that applies
the transformation s1 followed by s2, call rsMatrixLoadMultiply(&combined, &s2, &s1).

 Warning: Prior to version 21, storing the result back into right matrix is not supported and
will result in undefined behavior.  Use rsMatrixMulitply instead.   E.g. instead of doing
rsMatrixLoadMultiply (&m2r, &m2r, &m2l), use rsMatrixMultiply (&m2r, &m2l).
rsMatrixLoadMultiply (&m2l, &m2r, &m2l) works as expected.






rsMatrixLoadOrtho
: Load an orthographic projection matrix




void rsMatrixLoadOrtho(rs_matrix4x4* m, float left, float right, float bottom, float top, float near, float far);

 



 Parameters

mMatrix to set.
left
right
bottom
top
near
far



 Constructs an orthographic projection matrix, transforming the box identified by the
six clipping planes left, right, bottom, top, near, far into a unit cube
with a corner at (-1, -1, -1) and the opposite at (1, 1, 1).

 To apply this projection to a vector, multiply the vector by the created matrix
using rsMatrixMultiply().

 See https://en.wikipedia.org/wiki/Orthographic_projection .






rsMatrixLoadPerspective
: Load a perspective projection matrix




void rsMatrixLoadPerspective(rs_matrix4x4* m, float fovy, float aspect, float near, float far);

 



 Parameters

mMatrix to set.
fovyField of view, in degrees along the Y axis.
aspectRatio of x / y.
nearNear clipping plane.
farFar clipping plane.



 Constructs a perspective projection matrix, assuming a symmetrical field of view.

 To apply this projection to a vector, multiply the vector by the created matrix
using rsMatrixMultiply().






rsMatrixLoadRotate
: Load a rotation matrix




void rsMatrixLoadRotate(rs_matrix4x4* m, float rot, float x, float y, float z);

 



 Parameters

mMatrix to set.
rotHow much rotation to do, in degrees.
xX component of the vector that is the axis of rotation.
yY component of the vector that is the axis of rotation.
zZ component of the vector that is the axis of rotation.



 This function creates a rotation matrix.  The axis of rotation is the (x, y, z) vector.

 To rotate a vector, multiply the vector by the created matrix using rsMatrixMultiply().

 See http://en.wikipedia.org/wiki/Rotation_matrix .






rsMatrixLoadScale
: Load a scaling matrix




void rsMatrixLoadScale(rs_matrix4x4* m, float x, float y, float z);

 



 Parameters

mMatrix to set.
xMultiple to scale the x components by.
yMultiple to scale the y components by.
zMultiple to scale the z components by.



 This function creates a scaling matrix, where each component of a vector is multiplied
by a number.  This number can be negative.

 To scale a vector, multiply the vector by the created matrix using rsMatrixMultiply().






rsMatrixLoadTranslate
: Load a translation matrix




void rsMatrixLoadTranslate(rs_matrix4x4* m, float x, float y, float z);

 



 Parameters

mMatrix to set.
xNumber to add to each x component.
yNumber to add to each y component.
zNumber to add to each z component.



 This function creates a translation matrix, where a number is added to each element of
a vector.

 To translate a vector, multiply the vector by the created matrix using
rsMatrixMultiply().






rsMatrixMultiply
: Multiply a matrix by a vector or another matrix




float2 rsMatrixMultiply(const rs_matrix2x2* m, float2 in);

    Added in API level 14



float2 rsMatrixMultiply(rs_matrix2x2* m, float2 in);

    Removed from API level 14 and higher



float3 rsMatrixMultiply(const rs_matrix3x3* m, float2 in);

    Added in API level 14



float3 rsMatrixMultiply(const rs_matrix3x3* m, float3 in);

    Added in API level 14



float3 rsMatrixMultiply(rs_matrix3x3* m, float2 in);

    Removed from API level 14 and higher



float3 rsMatrixMultiply(rs_matrix3x3* m, float3 in);

    Removed from API level 14 and higher



float4 rsMatrixMultiply(const rs_matrix4x4* m, float2 in);

    Added in API level 14



float4 rsMatrixMultiply(const rs_matrix4x4* m, float3 in);

    Added in API level 14



float4 rsMatrixMultiply(const rs_matrix4x4* m, float4 in);

    Added in API level 14



float4 rsMatrixMultiply(rs_matrix4x4* m, float2 in);

    Removed from API level 14 and higher



float4 rsMatrixMultiply(rs_matrix4x4* m, float3 in);

    Removed from API level 14 and higher



float4 rsMatrixMultiply(rs_matrix4x4* m, float4 in);

    Removed from API level 14 and higher



void rsMatrixMultiply(rs_matrix2x2* m, const rs_matrix2x2* rhs);

 


void rsMatrixMultiply(rs_matrix3x3* m, const rs_matrix3x3* rhs);

 


void rsMatrixMultiply(rs_matrix4x4* m, const rs_matrix4x4* rhs);

 



 Parameters

mLeft matrix of the product and the matrix to be set.
rhsRight matrix of the product.
in



 For the matrix by matrix variant, sets m to the matrix product m * rhs.

 When combining two 4x4 transformation matrices using this function, the resulting
matrix will correspond to performing the rhs transformation first followed by
the original m transformation.

 For the matrix by vector variant, returns the post-multiplication of the vector
by the matrix, ie. m * in.

 When multiplying a float3 to a rs_matrix4x4, the vector is expanded with (1).

 When multiplying a float2 to a rs_matrix4x4, the vector is expanded with (0, 1).

 When multiplying a float2 to a rs_matrix3x3, the vector is expanded with (0).

 Starting with API 14, this function takes a const matrix as the first argument.






rsMatrixRotate
: Apply a rotation to a transformation matrix




void rsMatrixRotate(rs_matrix4x4* m, float rot, float x, float y, float z);

 



 Parameters

mMatrix to modify.
rotHow much rotation to do, in degrees.
xX component of the vector that is the axis of rotation.
yY component of the vector that is the axis of rotation.
zZ component of the vector that is the axis of rotation.



 Multiply the matrix m with a rotation matrix.

 This function modifies a transformation matrix to first do a rotation.  The axis of
rotation is the (x, y, z) vector.

 To apply this combined transformation to a vector, multiply the vector by the created
matrix using rsMatrixMultiply().






rsMatrixScale
: Apply a scaling to a transformation matrix




void rsMatrixScale(rs_matrix4x4* m, float x, float y, float z);

 



 Parameters

mMatrix to modify.
xMultiple to scale the x components by.
yMultiple to scale the y components by.
zMultiple to scale the z components by.



 Multiply the matrix m with a scaling matrix.

 This function modifies a transformation matrix to first do a scaling.   When scaling,
each component of a vector is multiplied by a number.  This number can be negative.

 To apply this combined transformation to a vector, multiply the vector by the created
matrix using rsMatrixMultiply().






rsMatrixSet
: Set one element




void rsMatrixSet(rs_matrix2x2* m, uint32_t col, uint32_t row, float v);

 


void rsMatrixSet(rs_matrix3x3* m, uint32_t col, uint32_t row, float v);

 


void rsMatrixSet(rs_matrix4x4* m, uint32_t col, uint32_t row, float v);

 



 Parameters

mMatrix that will be modified.
colZero-based column of the element to be set.
rowZero-based row of the element to be set.
vValue to set.



 Set an element of a matrix.

 Warning: The order of the column and row parameters may be unexpected.






rsMatrixTranslate
: Apply a translation to a transformation matrix




void rsMatrixTranslate(rs_matrix4x4* m, float x, float y, float z);

 



 Parameters

mMatrix to modify.
xNumber to add to each x component.
yNumber to add to each y component.
zNumber to add to each z component.



 Multiply the matrix m with a translation matrix.

 This function modifies a transformation matrix to first do a translation.  When
translating, a number is added to each component of a vector.

 To apply this combined transformation to a vector, multiply the vector by the
created matrix using rsMatrixMultiply().






rsMatrixTranspose
: Transpose a matrix place




void rsMatrixTranspose(rs_matrix2x2* m);

 


void rsMatrixTranspose(rs_matrix3x3* m);

 


void rsMatrixTranspose(rs_matrix4x4* m);

 



 Parameters

mMatrix to transpose.



 Transpose the matrix m in place.






Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated April 23, 2018.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
