Wi-Fi aware overview  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    Wi-Fi aware overview
  


Wi-Fi Aware capabilities enable devices running Android 8.0 (API level 26) and
higher to discover and connect directly to each other without any other type of
connectivity between them. Wi-Fi Aware is also known as Neighbor Awareness
Networking (NAN).
Wi-Fi Aware networking works by forming clusters with neighboring devices, or
by creating a new cluster if the device is the first one in an area. This
clustering behavior applies to the entire device and is managed by the Wi-Fi
Aware system service; apps have no control over clustering behavior. Apps use
the Wi-Fi Aware APIs to talk to the Wi-Fi Aware system service, which manages
the Wi-Fi Aware hardware on the device.
The Wi-Fi Aware APIs let apps perform the following operations:

Discover other devices: The API has a mechanism for finding other
nearby devices. The process starts when one device publishes one
or more discoverable services. Then, when a device subscribes to one or more
services and enters the publisher's Wi-Fi range, the subscriber receives a
notification that a matching publisher has been discovered. After the
subscriber discovers a publisher, the subscriber can either send a short
message or establish a network connection with the discovered device.
Devices can be both publishers and subscribers.
Create a network connection: After two devices have discovered each
other, either through Wi-Fi Aware discovery or some other mechanism like
Bluetooth or
BLE, they can create a
bi-directional Wi-Fi Aware network connection without an access point.

Wi-Fi Aware network connections support higher throughput rates across longer
distances than Bluetooth
connections. These types of connections are useful for apps that share large
amounts of data between users, such as photo-sharing apps.
Initial setup
To set up your app to use Wi-Fi Aware discovery and networking, perform the
following steps:

Request the following permissions in your app's manifest:


<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />


Check whether the device supports Wi-Fi Aware with the
PackageManager API, as shown below:


Kotlin

context.packageManager.hasSystemFeature(PackageManager.FEATURE_WIFI_AWARE)

Java

context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI_AWARE);




Check whether Wi-Fi Aware is currently available. Wi-Fi Aware may exist on
the device, but may not be currently available because the user has disabled
Wi-Fi. Depending on their hardware and firmware capabilities, some devices
may not support Wi-Fi Aware if Wi-Fi Direct, SoftAP, or tethering is in
use. To check whether Wi-Fi Aware is currently available, call
isAvailable().
The availability of Wi-Fi Aware can change at any time. Your app should
register a BroadcastReceiver to receive
ACTION_WIFI_AWARE_STATE_CHANGED,
which is sent whenever availability changes. When your app receives the
broadcast intent, the app should check the current state of availability and
adjust its behavior accordingly. For example:


Kotlin

val wifiAwareManager = context.getSystemService(Context.WIFI_AWARE_SERVICE) as WifiAwareManager?
val filter = IntentFilter(WifiAwareManager.ACTION_WIFI_AWARE_STATE_CHANGED)
val myReceiver = object : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        if (wifiAwareManager?.isAvailable) {
            ...
        } else {
            ...
        }
    }
}
context.registerReceiver(myReceiver, filter)

Java

WifiAwareManager wifiAwareManager =
        (WifiAwareManager)context.getSystemService(Context.WIFI_AWARE_SERVICE)
IntentFilter filter =
        new IntentFilter(WifiAwareManager.ACTION_WIFI_AWARE_STATE_CHANGED);
BroadcastReceiver myReceiver = new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
        if (wifiAwareManager.isAvailable()) {
            ...
        } else {
            ...
        }
    }
};
context.registerReceiver(myReceiver, filter);



For more information, see Broadcasts.
Note: Make sure that you register the broadcast receiver before checking
availability. Otherwise, there could be a period of time when the app
thinks that Wi-Fi Aware is available but isn't notified if availability
changes.
Obtain a session
To start using Wi-Fi Aware, your app must obtain a
WifiAwareSession by calling
attach(). This method
does the following:

Turns on the Wi-Fi Aware hardware.
Joins or forms a Wi-Fi Aware cluster.
Creates a Wi-Fi Aware session with a unique namespace that acts as a
container for all discovery sessions created within it.

If the app attaches successfully, the system executes the
onAttached() callback.
This callback provides a WifiAwareSession object
that your app should use for all further session operations. An app can use the
session to publish a service or
subscribe to a service.
Your app should call
attach() only once. If
your app calls attach()
multiple times, the app receives a different session for each call, each with
its own namespace. This could be useful in complex scenarios, but should
generally be avoided.
Note: As long as there are active sessions, the system maintains synchronization
with a Wi-Fi Aware cluster. This clustering consumes resources and battery. To
conserve resources, call
WifiAwareSession.close()
when the session is no longer needed.
Publish a service
To make a service discoverable, call the
publish() method, which
takes the following parameters:

PublishConfig specifies the name of the
  service and other configuration properties, such as match filter.
DiscoverySessionCallback specifies the
  actions to execute when events occur, such as when the subscriber receives
  a message.

Here's an example:

Kotlin

val config: PublishConfig = PublishConfig.Builder()
        .setServiceName(AWARE_FILE_SHARE_SERVICE_NAME)
        .build()
awareSession.publish(config, object : DiscoverySessionCallback() {

    override fun onPublishStarted(session: PublishDiscoverySession) {
        ...
    }

    override fun onMessageReceived(peerHandle: PeerHandle, message: ByteArray) {
        ...
    }
})

Java

PublishConfig config = new PublishConfig.Builder()
    .setServiceName(“Aware_File_Share_Service_Name”)
    .build();

awareSession.publish(config, new DiscoverySessionCallback() {
    @Override
    public void onPublishStarted(PublishDiscoverySession session) {
        ...
    }
    @Override
    public void onMessageReceived(PeerHandle peerHandle, byte[] message) {
        ...
    }
}, null);




If publication succeeds, then the
onPublishStarted()
callback method is called.
After publication, when devices running matching subscriber apps move into the
Wi-Fi range of the publishing device, the subscribers discover the service. When
a subscriber discovers a publisher, the publisher does not receive a
notification; if the subscriber sends a message to the publisher, however, then
the publisher receives a notification. When that happens, the
onMessageReceived()
callback method is called. You can use the
PeerHandle argument from this method to
send a message back to the subscriber or
create a connection to it.
To stop publishing the service, call
DiscoverySession.close().
Discovery sessions are associated with their parent
WifiAwareSession. If the parent session is
closed, its associated discovery sessions are also closed. While discarded
objects are closed as well, the system doesn't guarantee when out-of-scope
sessions are closed, so we recommend that you explicitly call the close()
methods.
Subscribe to a service
To subscribe to a service, call the
subscribe() method,
which takes the following parameters:

 SubscribeConfig specifies the name of the
  service to subscribe to and other configuration properties, such as match
  filter.
DiscoverySessionCallback specifies the
  actions to execute when events occur, such as when a publisher is discovered.
  

Here's an example:

Kotlin

val config: SubscribeConfig = SubscribeConfig.Builder()
        .setServiceName(AWARE_FILE_SHARE_SERVICE_NAME)
        .build()
awareSession.subscribe(config, object : DiscoverySessionCallback() {

    override fun onSubscribeStarted(session: SubscribeDiscoverySession) {
        ...
    }

    override fun onServiceDiscovered(
            peerHandle: PeerHandle,
            serviceSpecificInfo: ByteArray,
            matchFilter: List<ByteArray>
    ) {
        ...
    }
}, null)

Java

SubscribeConfig config = new SubscribeConfig.Builder()
    .setServiceName("Aware_File_Share_Service_Name")
    .build();

awareSession.subscribe(config, new DiscoverySessionCallback() {
    @Override
    public void onSubscribeStarted(SubscribeDiscoverySession session) {
        ...
    }

    @Override
    public void onServiceDiscovered(PeerHandle peerHandle,
            byte[] serviceSpecificInfo, List<byte[]> matchFilter) {
        ...
    }
}, null);




If the subscribe operation succeeds, the system calls the
onSubscribeStarted()
callback in your app. Because you can use the
SubscribeDiscoverySession argument in the
callback to communicate with a publisher after your app has discovered one, you
should save this reference. You can update the subscribe session at any time by
calling
updateSubscribe()
on the discovery session.
At this point, your subscription waits for matching publishers to come into
Wi-Fi range. When this happens, the system executes the
onServiceDiscovered()
callback method. You can use the PeerHandle
argument from this callback to send a message or
create a connection to that publisher.
To stop subscribing to a service, call
DiscoverySession.close().
Discovery sessions are associated with their parent
WifiAwareSession. If the parent session is
closed, its associated discovery sessions are also closed. While discarded
objects are closed as well, the system doesn't guarantee when out-of-scope
sessions are closed, so we recommend that you explicitly call the close()
methods.
Send a message
To send a message to another device, you need the following objects:

A DiscoverySession. This object allows you
to call
sendMessage().
Your app gets a DiscoverySession by either
publishing a service or subscribing to a
service.
The other device's PeerHandle, to route the
message. Your app gets another device's
PeerHandle in one of two ways:

Your app publishes a service and receives a message from a subscriber.
Your app gets the subscriber's
PeerHandle from the onMessageReceived()
callback.
Your app subscribes to a service. Then, when it discovers a matching
publisher, your app gets the publisher's
PeerHandle from the
onServiceDiscovered()
callback.


To send a message, call
sendMessage(). The
following callbacks might then occur:

When the message is successfully received by the peer, the system calls the
onMessageSendSucceeded()
callback in the sending app.
When the peer receives a message, the system calls the
onMessageReceived()
callback in the receiving app.

Note: Messages are generally used for lightweight messaging, as they might not
be delivered (or be delivered out-of-order or more than once) and are limited to
about 255 bytes in length. To determine the exact length limit, call
getMaxServiceSpecificInfoLength().
For high speed, bi-directional communication, your app should
create a connection instead.
Though the PeerHandle is required to communicate with peers, you should not
rely on it as a permanent identifier of peers. Higher-level identifiers can be
used by the application--embedded in the discovery service itself or in
subsequent messages. You can embed an identifier in the discovery service with
the
setMatchFilter()
or
setServiceSpecificInfo()
method of PublishConfig or
SubscribeConfig. The
setMatchFilter() method affects discovery, whereas the
setServiceSpecificInfo() method does not affect discovery.
Embedding an identifier in a message implies modifying the message byte array to
include an identifier (for example, as the first couple of bytes).
Create a connection
There are two ways to create a Wi-Fi Aware connection. The first way assumes
that you have used Wi-Fi Aware to discover the other device and you have the
other device's PeerHandle. The second way
assumes that you have discovered the other device's MAC address through some
other mechanism, such as Bluetooth
or BLE; this is known as
out-of-band discovery, or OOB.
Regardless of which method you choose, there are always two devices in a Wi-Fi
Aware connection: an initiator and a responder. If you're using Wi-Fi Aware
discovery, then the roles are fixed and don't need to be explicitly specified:
the subscriber is the initiator and the publisher is the responder. If you are
using out-of-band discovery, then the devices need to negotiate these roles on
their own.
To create a connection, complete the following sequence of steps:

Create a network specifier:

For Wi-Fi Aware discovery, call either
DiscoverySession.createNetworkSpecifierOpen()
or
DiscoverySession.createNetworkSpecifierPassphrase()
from the publisher and subscriber.
For OOB discovery, call either
WifiAwareSession.createNetworkSpecifierOpen()
or
WifiAwareSession.createNetworkSpecifierPassphrase()
from both devices.

Build a network request, setting the transport mechanism to
TRANSPORT_WIFI_AWARE and the network
specifier to the value created in step 1:


Kotlin

var myNetworkRequest: NetworkRequest = NetworkRequest.Builder()
        .addTransportType(NetworkCapabilities.TRANSPORT_WIFI_AWARE)
        .setNetworkSpecifier(networkSpecifier)
        .build()

Java

    NetworkRequest myNetworkRequest = new NetworkRequest.Builder()
         .addTransportType(NetworkCapabilities.TRANSPORT_WIFI_AWARE)
         .setNetworkSpecifier(networkSpecifier)
         .build();




Call requestNetwork()
and provide the following callback methods:


Kotlin

callback = object : ConnectivityManager.NetworkCallback() {

    override fun onAvailable(network: Network) {
        ...
    }

    override fun onLinkPropertiesChanged(network: Network, linkProperties: LinkProperties) {
        ...
    }

    override fun onLost(network: Network) {
        ...
    }
}
connMgr.requestNetwork(networkRequest, callback)

Java

callback = new ConnectivityManager.NetworkCallback() {
    @Override
    public void onAvailable(Network network) {
        ...
    }
    @Override
    public void onLinkPropertiesChanged(Network network,
            LinkProperties linkProperties) {
        ...
    }
    @Override
    public void onLost(Network network) {
        ...
    }
};
    connMgr.requestNetwork(networkRequest, callback);



The appropriate callback methods are called when the network connection is
available, changed, or lost.
Note: you must first request the network on the responder (publisher) before
requesting it on the initiator (subscriber).

When you're finished with the network connection, call
unregisterNetworkCallback().

Note: Building a network request and specifying the required network
capabilities aren't specific to the Wi-Fi Aware API. For more information on
working with network requests, see ConnectivityManager.
Transfer data
After a connection is established, you can transfer data between the devices
with sockets. Wi-Fi Aware connections use IPv6.
The basic steps for transferring data are as follows:

Create a ServerSocket. This socket waits
for a connection from a client on a specified port and blocks until the
connection occurs, so do this in a background thread.


Kotlin

callback = object : ConnectivityManager.NetworkCallback() {
    ...
    override fun onLinkPropertiesChanged(network: Network?, lp: LinkProperties?) {
        val awareNi: NetworkInterface = NetworkInterface.getByName(lp?.interfaceName)
        var ipv6: Inet6Address? = null
        val inetAddresses: Enumeration = awareNi.inetAddresses
        while (inetAddresses.hasMoreElements()) {
            val addr = inetAddresses.nextElement()
            if (addr is Inet6Address && addr.isLinkLocalAddress) {
                ipv6 = addr
                break
            }
        }

        ipv6?.run {
            // should be done in a separate thread
            val ss = ServerSocket(0, 5, ipv6)
            val port: Int = ss.localPort
        }
    }
    ...
}

Java

callback = new ConnectivityManager.NetworkCallback() {
    ...
    @Override
    public void onLinkPropertiesChanged(Network network, LinkProperties lp) {
        NetworkInterface awareNi = NetworkInterface.getByName(
                                                     lp.getInterfaceName());
        Inet6Address ipv6 = null;
        Enumeration inetAddresses = awareNi.getInetAddresses();
        while (inetAddresses.hasMoreElements()) {
               InetAddress addr = inetAddresses.nextElement();
               if (addr instanceof Inet6Address) {
                     if (((Inet6Address) addr).isLinkLocalAddress()) {
                             ipv6 = (Inet6Address) addr;
                             break;
                     }
               }
        }
        // should be done in a separate thread
        ServerSocket ss = new ServerSocket(0, 5, ipv6);
        int port = ss.getLocalPort();
    }
    ...
};




Create a client Socket. The client uses the IP
address and port of the server socket to connect to the server device.


Kotlin

callback = object: ConnectivityManager.NetworkCallback() {
    ...
    override fun onLinkPropertiesChanged(network: Network?, lp: LinkProperties?) {
        // should be done in a separate thread
        // obtain server IPv6 and port number out-of-band
        val cs: Socket? = network?.socketFactory.createSocket(serverIpv6, serverPort)
                ?: null
    }
    ...
}

Java

callback = new ConnectivityManager.NetworkCallback() {
    ...
    @Override
    public void onLinkPropertiesChanged(Network network, LinkProperties lp) {
        // should be done in a separate thread
        // obtain server IPv6 and port number out-of-band
        Socket cs = network.getSocketFactory().createSocket(serverIpv6, serverPort);
    }
    ...
};




Send data from the client to the server. When the client socket successfully
connects to the server socket, you can send data from the client to the
server with byte streams.
The server socket waits for a client connection (with the
accept() method). This call
blocks until a client connects, so call it in another thread. When a client
connects, the server device can receive the data from the client.
Carry out any actions with this data, such as saving it to a file or
presenting it to the user.

The device opening the client socket (the client device) needs to know the IPv6
address and port number of the server socket. These items must be communicated
from the server device to the client device using out-of-band mechanisms, such
as Wi-Fi Aware messaging.
Ranging peers and location-aware discovery
A device with Wi-Fi RTT location
capabilities can directly measure distance to peers and use this information to
constrain Wi-Fi Aware service discovery.
The Wi-Fi RTT API allows direct ranging to a Wi-Fi Aware peer using either its
MAC address or its PeerHandle.
Wi-Fi Aware discovery can be constrained to only discover services within a
particular geofence. For example, you can set up a geofence that allows discovery
of a device publishing an "Aware_File_Share_Service_Name" service that is no
closer than 3 meters (specified as 3,000 mm) and no further than 10 meters
(specified as 10,000 mm).
To enable geofencing, the publisher and the subscriber both must take action:

The publisher must enable ranging on the published service using
setRangingEnabled(true).
If the publisher doesn’t enable ranging, then any geofence constraints
specified by the subscriber are ignored and normal discovery is performed,
ignoring distance.
The subscriber must specify a geofence using some combination of
setMinDistanceMm
and
setMaxDistanceMm.
For either value, an unspecified distance implies no limit. Only specifying
the maximum distance implies a minimum distance of 0. Only specifying the
minimum distance implies no maximum.

When a peer service is discovered within a geofence, the
onServiceDiscoveredWithinRange
callback is triggered, which provides the measured distance to the peer. The
direct Wi-Fi RTT API can then be called as necessary to measure distance at
later times.


Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated February 13, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
