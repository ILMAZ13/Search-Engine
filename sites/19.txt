App Manifest Overview  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    App Manifest Overview
  


Every app project must have an AndroidManifest.xml file (with precisely that name)
at the root of the project source set.
The manifest file describes essential information
about your app to the Android build tools, the Android operating system, and
Google Play.
Among many other things, the manifest file is required to declare the following:

The app's package name, which usually matches your code's namespace. The
Android build tools use this to determine the location of code entities when
building your project. When packaging the app, the build tools replace this
value with the application ID from the Gradle build files, which is used as the
unique app identifier on the system and on Google Play. Read more about the package name and app ID.

The components of the app, which include all activities, services,
broadcast receivers, and content providers. Each component must define basic
properties such as the name of its Kotlin or Java class. It can also declare
capabilities such as which device configurations it can handle, and
intent filters that describe how the component can be started.
Read more about app components.
The permissions that the app needs in order to
access protected parts of the system or other apps. It also declares
any permissions that other apps must have if they want to access content from this app.
Read more about permissions.

The hardware and software features the app requires, which affects which
devices can install the app from Google Play. Read more about device compatibility.

If you're using Android Studio to build your app, the manifest file
is created for you, and most of the essential manifest elements are added as
you build your app (especially when using code templates).
File features
The following sections describe how some of the most important characteristics
of your app are reflected in the manifest file.
Package name and application ID
The manifest file's root element requires an attribute for your app's package
name (usually matching your project directory structure—the Java namespace).
For example, the following snippet shows the root
<manifest> element with the
package name "com.example.myapp":

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.myapp"
    android:versionCode="1"
    android:versionName="1.0" >
    ...
</manifest>

While building your app into the final application package (APK), the
Android build tools use the package attribute for two things:

It applies this name as the namespace for your app's generated
R.java class (used to access your app resources).
Example: With the above manifest, the R class
is created at com.example.myapp.R.

It uses this name to resolve any relative class names that are declared
in the manifest file.
Example: With the above manifest, an activity declared as <activity
android:name=".MainActivity"> is resolved to be
com.example.myapp.MainActivity.


As such, the name in the manifest's package attribute should always match your
project's base package name where you keep your activities and other app code.
Of course, you can have other sub-packages in your project, but those files must
import the R.java class using the namespace from the package attribute.
However, beware that, once the APK is compiled, the package attribute also
represents your app's universally unique application ID. After the build tools
perform the above tasks based on the package name, they replace the package
value with the value given to the applicationId property in your project's
build.gradle file (used in Android Studio projects). This final value for
the package attribute must be universally unique because it is the only
guaranteed way to identify your app on the system and in Google Play.
The distinction between the package name in the manifest and the
applicationId in the build.gradle file can be a bit confusing.
But if you keep them same, you have nothing to worry about.
However, if you decide to make your code's
namespace (and thus, the package name in the manifest) something different
from the applicationId from the build file, be
sure you fully understand the implications of setting the application ID. That page explains how you can safely
adjust the manifest's package name independent of the build file's
applicationId, and change the application ID for different build
configurations.
App components
For each app
component that you create in your app,
you must declare a corresponding XML element in the manifest file:

<activity>
  for each subclass of Activity.
<service>
  for each subclass of Service.
<receiver>
  for each subclass of BroadcastReceiver.
<provider>
  for each subclass of ContentProvider.

If you subclass any of these components without declaring it in the manifest
file, the system cannot start it.
The name of your subclass must be specified with the name
attribute, using the full package designation. For example, an
Activity subclass can be declared as follows:

<manifest ... >
    <application ... >
        <activity android:name="com.example.myapp.MainActivity" ... >
        </activity>
    </application>
</manifest>
However, if the first character in the name value is a period,
the app's package name (from the
<manifest>
element's
package
attribute) is prefixed to the name. For example, the following activity name
is resolved to `"com.example.myapp.MainActivity"`:

<manifest package="com.example.myapp" ... >
    <application ... >
        <activity android:name=".MainActivity" ... >
            ...
        </activity>
    </application>
</manifest>
If you have app components that reside in sub-packages (such as in
com.example.myapp.purchases), the name value must add the missing
sub-package names (such as ".purchases.PayActivity") or use the
fully-qualified package name.
Intent filters

App activities, services, and broadcast
receivers are activated by intents. An intent is a message defined by
an Intent object that describes an
action to perform, including the data to be acted upon, the category of
component that should perform the action, and other instructions.
When an app issues an intent to the system, the system locates an app
component that can handle the intent based on intent filter
declarations in each app's manifest file. The system launches
an instance of the matching component and passes the Intent object to that component. If more than one app can
handle the intent, then the user can select which app to use.
An app component can have any number of intent filters (defined with the
<intent-filter>
element), each one describing a different capability of that component.


For more information, see the Intents and Intent Filters document.

Icons and labels

A number of manifest elements have icon and label
attributes for displaying a small icon and a text label, respectively,
to users for the corresponding app component.

In every case, the icon and label that are set in a parent element become the default
icon and label value for all child elements.
For example, the icon and label that are set in the
<application>
element are the default icon and label for each of the app's components (such as all activities).

The icon and label that are set in a component's
<intent-filter>
are shown to the user whenever that component is presented as an option to
fulfill an intent. By default, this icon is inherited from whichever
icon is declared for the parent component (either the
<activity> or
<application>
element), but you might want to change the icon
for an intent filter if it provides a unique action that you'd like to better indicate in the
chooser dialog. For more information, see Allow Other Apps to Start Your Activity.

Permissions
Android apps must request permission to access sensitive user data
(such as contacts and SMS) or certain system features (such as the
camera and internet access). Each permission is identified by a unique label.
For example, an app that needs to send SMS messages must have the following
line in the manifest: 

<manifest ... >
    <uses-permission android:name="android.permission.SEND_SMS"/>
    ...
</manifest>

Beginning with
Android 6.0 (API level 23), the user can approve or reject some app permisions at runtime. But
no matter which Android version your app supports, you must declare all permission requests with a
<uses-permission>
element in the manifest. If the permission is granted, the app is able to use the protected
features. If not, its attempts to access those features fail.

Your app can also protect its own components with permissions. It can use
any of the permissions that are defined by Android, as listed in
android.Manifest.permission, or a permission
that's declared in another app. Your app can also define its own permissions.
A new permission is declared with the
<permission>
element.
For more information, see the Permissions
Overview.
Device compatibility
The manifest file is also where you can declare what types of hardware or
software features your app requires, and thus, which types of devices your app
is compatible with. Google Play Store does not allow your app to be installed
on devices that don't provide the features or system version that your app
requires.
There are several manifest tags that define which devices your app is
compatible with. The following are just a couple of the most common tags.
<uses-feature>
The 
<uses-feature> element allows you to declare hardware and
software features your app needs. For example, if your app cannot achieve basic
functionality on a device without a compass sensor, you can declare the compass
sensor as required with the following manifest tag:

<manifest ... >
    <uses-feature android:name="android.hardware.sensor.compass"
                  android:required="true" />
    ...
</manifest>

Note:
If you'd like to make your app available on Chromebooks, there are some
important hardware and software feature limitations
that you should consider. For more information, see
App Manifest Compatibility for
Chromebooks. 
<uses-sdk>
Each successive platform version often adds new APIs not
available in the previous version. To indicate the minimum version with which your app is
compatible, your manifest must include the <uses-sdk> tag
and its minSdkVersion
attribute.
However, beware that attributes in the
<uses-sdk> element
are overridden by corresponding properties
in the build.gradle file.
So if you're using Android Studio, you must specify the minSdkVersion and
targetSdkVersion values there instead:

android {
  defaultConfig {
    applicationId 'com.example.myapp'

    // Defines the minimum API level required to run the app.
    minSdkVersion 15

    // Specifies the API level used to test the app.
    targetSdkVersion 28

    ...
  }
}

For more information about the build.gradle file, read about how to configure your build.
To learn more about how to declare your app's support for different devices,
see the Device Compatibility
Overview.
File conventions
This section describes the conventions and rules that generally apply to all
elements and attributes in the manifest file.

Elements
Only the
<manifest> and
<application>
elements are required. They each must occur only once.
Most of the other elements can occur zero or more times. However, some
of them must be present to make the manifest file useful.

 All of the values are set through attributes, not as character data within
an element. 

Elements at the same level are generally not ordered. For example, the
<activity>,
<provider>, and
<service>
elements can be placed in any order. There are two key exceptions to this
rule:


    An <activity-alias>
    element must follow the
    <activity>
    for which it is an alias.
  

    The <application>
    element must be the last element inside the
    <manifest>
    element.
  

Attributes
Technically, all attributes are optional. However, many attributes
must be specified so that an element can accomplish its purpose.
For truly optional attributes, the reference documentation
 indicates the default values.

Except for some attributes of the root
<manifest>
element, all attribute names begin with an android: prefix.
For example, android:alwaysRetainTaskState. Because the prefix is
universal, the documentation generally omits it when referring to attributes
by name.
Multiple values
If more than one value can be specified, the element is almost always
repeated, rather than multiple values being listed within a single element.
For example, an intent filter can list several actions:

<intent-filter ... >
    <action android:name="android.intent.action.EDIT" />
    <action android:name="android.intent.action.INSERT" />
    <action android:name="android.intent.action.DELETE" />
    ...
</intent-filter>
Resource values
Some attributes have values that are displayed to users, such as
the title for an activity or your app icon. The value for these attributes might
differ based on the user's language or other device configurations (such as to
provide a different icon size based on the device's pixel density), so the
values should be set from a resource or theme, instead of hard-coded into the
manifest file. The actual value can then change based on alternative
resources that you provide for different device configurations.

Resources are expressed as values with the following format:
"@[package:]type/name"
You can omit the package name if the resource is provided by your
app (including if it is provided by a library dependency, because library resources are
merged into yours). The only other valid package name is
android, when you want to use a resource from the Android
framework.
The type is a type of resource, such as string or
drawable,
and the name is the name that identifies the specific resource.
Here is an example:

<activity android:icon="@drawable/smallPic" ... >
For more information about how to add resources in your project, read
Providing Resources.

To instead apply a value that's defined in a theme, the first character
must be ? instead of @:

"?[package:]type/name"


String values
Where an attribute value is a string, you must use double backslashes
(\\) to escape characters, such as \\n for
a newline or \\uxxxx for a Unicode character.

Manifest elements reference
The following table provides links to reference documents for all valid
elements in the AndroidManifest.xml file.


<action>
Adds an action to an intent filter.
<activity>
Declares an activity component.
<activity-alias>
Declares an alias for an activity.
<application>
The declaration of the application.
<category>
Adds a category name to an intent filter.
<compatible-screens>
Specifies each screen configuration with which the application is compatible.
<data>
Adds a data specification to an intent filter.
<grant-uri-permission>
Specifies the subsets of app data that the parent content provider has permission to access.
<instrumentation>
Declares an Instrumentation class that enables you to monitor an application's interaction with the system. 
<intent-filter>
Specifies the types of intents that an activity, service, or broadcast receiver can respond to.
<manifest>
The root element of the AndroidManifest.xml file.
<meta-data>
A name-value pair for an item of additional, arbitrary data that can be supplied to the parent component.
<path-permission>
Defines the path and required permissions for a specific subset of data within a content provider.
<permission>
Declares a security permission that can be used to limit access to specific components or features of this or other applications.
<permission-group>
Declares a name for a logical grouping of related permissions.
<permission-tree>
Declares the base name for a tree of permissions.
<provider>
Declares a content provider component.
<receiver>
Declares a broadcast receiver component.
<service>
Declares a service component.
<supports-gl-texture>
Declares a single GL texture compression format that the app supports.
<supports-screens> 
Declares the screen sizes your app supports and enables screen compatibility mode for screens larger than what your app supports.
<uses-configuration> 
Indicates specific input features the application requires.
<uses-feature> 
Declares a single hardware or software feature that is used by the application.
<uses-library>
Specifies a shared library that the application must be linked against.
<uses-permission>
Specifies a system permission that the user must grant in order for the app to operate correctly.
<uses-permission-sdk-23>
Specifies that an app wants a particular permission, but only if the app is installed on a device running Android 6.0 (API level 23) or higher.
<uses-sdk>
Lets you express an application's compatibility with one or more versions of the Android platform, by means of an API level integer.

Example manifest file
The XML below is a simple example AndroidManifest.xml that declares
two activities for the app.
<?xml version="1.0" encoding="utf-8"?>
<manifest
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:versionCode="1"
    android:versionName="1.0"
    package="com.example.myapp">

    <!-- Beware that these values are overridden by the build.gradle file -->
    <uses-sdk android:minSdkVersion="15" android:targetSdkVersion="26" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">

        <!-- This name is resolved to com.example.myapp.MainActivity
             based upon the package attribute -->
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".DisplayMessageActivity"
            android:parentActivityName=".MainActivity" />
    </application>
</manifest>




Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 23, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
