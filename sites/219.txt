VPN  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    VPN
  


Android provides APIs for developers to create virtual private network (VPN)
solutions. After reading this guide, you’ll know how to develop and test your
own VPN client for Android-powered devices.
Overview
VPNs allow devices that aren’t physically on a network to securely access the
network.
Android includes a built-in (PPTP and L2TP/IPSec) VPN client, which is sometimes
called legacy VPN. Android 4.0 (API Level 14) introduced APIs so that app
developers could provide their own VPN solutions. You package your VPN solution
into an app that people install onto the device. Developers normally build a VPN
app for one of the following reasons:

To offer VPN protocols that the built-in client doesn’t support.
To help people connect to a VPN service without complex configuration.

The rest of this guide explains how to develop VPN apps (including
always-on and per-app VPN) and doesn’t cover the
built-in VPN client.
User experience
Android provides a user interface (UI) to help somebody configure, start, and
stop your VPN solution. The system UI also makes the person using the device
aware of an active VPN connection. Android shows the following UI components for
VPN connections:

Before a VPN app can become active for the first time, the system displays a
connection request dialog. The dialog prompts the person using the device to
confirm that they trust the VPN and accept the request.
The VPN settings screen (Settings > Network & Internet > VPN) shows the VPN
apps where a person accepted connection requests. There’s a button to configure
system options or forget the VPN.
The Quick Settings tray shows an information panel when a connection is
active. Tapping the label displays a dialog with more information and a link
to Settings.
The status bar includes a VPN (key) icon to indicate an active connection.

Your app also needs to provide a UI so that the person using the device can
configure your service’s options. For example, your solution might need to
capture the account authentication settings. Apps should show the following UI:

Controls to manually start and stop a connection. Always-on VPN
can connect when needed, but allow people to configure the connection the first
time they use your VPN.
A non-dismissible notification when the service is active. The notification can
show the connection status or provide more information—such as network stats.
Tapping the notification brings your app to the foreground. Remove the
notification after the service becomes inactive.

VPN service
Your app connects the system networking for a user (or a work
profile) to a VPN gateway. Each user (or work profile) can run a
different VPN app. You create a VPN service that the system uses to start and
stop your VPN, and track the connection status. Your VPN service inherits from
VpnService.
The service also acts as your container for the VPN gateway connections and
their local device interfaces. Your service instance call
VpnService.Builder methods to establish a new local interface.

Figure 1. How VpnService connects Android
    networking to the VPN gateway


Your app transfers the following data to connect the device to the VPN gateway:

Reads outgoing IP packets from the local interface’s file descriptor, encrypts
them, and sends them to the VPN gateway.
Writes incoming packets (received and decrypted from the VPN gateway) to the
local interface’s file descriptor.

Warning: Your app must use strong encryption when transferring data to and from
the VPN gateway.
There’s only one active service per user or profile. Starting a new service,
automatically stops an existing service.
Add a service
To add a VPN service to your app, create an Android service inheriting from
VpnService. Declare the VPN service in your app
manifest file with the following additions:

Protect the service with the BIND_VPN_SERVICE
permission so that only the system can bind to your service.
Advertise the service with the "android.net.VpnService" intent filter so that
the system can find your service.

This example shows how you can declare the service in your app manifest file:
<service android:name=".MyVpnService"
         android:permission="android.permission.BIND_VPN_SERVICE">
     <intent-filter>
         <action android:name="android.net.VpnService"/>
     </intent-filter>
</service>

Now that your app declares the service, the system can automatically start
and stop your app’s VPN service when needed. For example, the system controls
your service when running always-on VPN.
Prepare a service
To prepare the app to become the user’s current VPN service, call
VpnService.prepare(). If the person using the device hasn’t
already given permission for your app, the method returns an activity intent.
You use this intent to start a system activity that asks for permission. The
system shows a dialog that’s similar to other permissions dialogs, such as
camera or contacts access. If your app is already prepared, the method returns
null.
Only one app can be the current prepared VPN service. Always call
VpnService.prepare() because a person might have set a different
app as the VPN service since your app last called the method. To learn more, see
the Service lifecycle section.
Connect a service
Once the service is running, you can establish a new local interface that's
connected to a VPN gateway. To request permission and connect to your service to
the VPN gateway, you need to complete the steps in the following order:

Call VpnService.prepare() to ask for permission (when
needed).
Call VpnService.protect() to keep your app's tunnel socket
outside of the system VPN and avoid a circular connection.
Call DatagramSocket.connect() to connect your app's tunnel
socket to the VPN gateway.
Call VpnService.Builder methods to configure a new local
TUN interface on the
device for VPN traffic.
Call VpnService.Builder.establish() so that the system
establishes the local TUN interface and begins routing traffic through the
interface.

A VPN gateway normally suggests settings for the local TUN interface during
handshaking. Your app calls VpnService.Builder methods to configure a
service as shown in the following sample:


Kotlin
// Configure a new interface from our VpnService instance. This must be done
// from inside a VpnService.
val builder = Builder()

// Create a local TUN interface using predetermined addresses. In your app,
// you typically use values returned from the VPN gateway during handshaking.
val localTunnel = builder
        .addAddress("192.168.2.2", 24)
        .addRoute("0.0.0.0", 0)
        .addDnsServer("192.168.1.1")
        .establish()


Java
// Configure a new interface from our VpnService instance. This must be done
// from inside a VpnService.
VpnService.Builder builder = new VpnService.Builder();

// Create a local TUN interface using predetermined addresses. In your app,
// you typically use values returned from the VPN gateway during handshaking.
ParcelFileDescriptor localTunnel = builder
    .addAddress("192.168.2.2", 24)
    .addRoute("0.0.0.0", 0)
    .addDnsServer("192.168.1.1")
    .establish();


The example in the Per-app VPN section shows an IPv6 config including
more options. You need to add the following VpnService.Builder values
before you can establish a new interface:

addAddress()
Add at least one IPv4 or IPv6 address along with a subnet mask that the system
assigns as the local TUN interface address. Your app typically receives the IP
addresses and subnet masks from a VPN gateway during handshaking.
addRoute()
Add at least one route if you want the system to send traffic through the VPN
interface. Routes filter by destination addresses. To accept all traffic, set an
open route such as 0.0.0.0/0 or ::/0.

The establish() method returns a
ParcelFileDescriptor instance that your app uses to read and write
packets to and from the interface’s buffer. The establish()
method returns null if your app isn’t prepared or somebody revokes the
permission.
Service lifecycle
Your app should track the status of the system’s selected VPN and any active
connections. Update your app’s user interface (UI) to keep the person using the
device aware of any changes.
Starting a service
Your VPN service can be started in the following ways:

Your app starts the service—normally because a person tapped a connect button.
The system starts the service because always-on VPN is on.

Your app starts the VPN service by passing an intent to
startService(). To learn more, read Starting a
service.
The system starts your service in the background by calling
onStartCommand(). However, Android places restrictions on
background apps in version 8.0 (API Level 26) or higher. If you support these
API Levels, you need to transition your service to the foreground by calling
Service.startForeground(). To learn more, read Running a
service in the foreground.
Stopping a service
A person using the device can stop your service by using your app’s UI. Stop the
service instead of just closing the connection. The system also stops an active
connection when the person using the device does the following in the VPN screen
of the Settings app:

disconnects or forgets the VPN app
switches off always-on VPN for an active connection

The system calls your service’s onRevoke() method but this call
might not happen on the main thread. When the system calls this method, an
alternative network interface is already routing traffic. You can safely dispose
of the following resources:

Close the protected tunnel socket to the VPN gateway by calling
DatagramSocket.close().
Close the parcel file descriptor (you don’t need to drain it) by calling
ParcelFileDescriptor.close().

Always-on VPN
Android can start a VPN service when the device boots and keep it running while
the device is on. This feature is called always-on VPN and is available in
Android 7.0 (API Level 24) or higher. While Android maintains the service
lifecycle, it’s your VPN service that’s responsible for the VPN-gateway
connection. Always-on VPN can also block connections that don’t use the VPN.
User experience
In Android 8.0 or higher, the system shows the following dialogs to make the
person using the device aware of always-on VPN:

When always-on VPN connections disconnect or can't connect, people see a
non-dismissible notification. Tapping the notification shows a dialog that
explains more. The notification disappears when the VPN reconnects or somebody
turns off the always-on VPN option.
Always-on VPN allows the person using a device to block any network
connections that don't use the VPN. When turning on this option, the Settings
app warns people that they don't have an internet connection before the VPN
connects. The Settings app prompts the person using the device to continue or
cancel.

Because the system (and not a person) starts and stops an always-on connection,
you need to adapt your app’s behavior and user interface:

Disable any UI that disconnects the connection because the system and Settings
app control the connection.
Save any config between each app start and configure a connection with the
latest settings. Because the system starts your app on demand, the person
using the device might not always want to configure a connection.

You can also use managed configurations to configure a
connection. Managed configurations help an IT admin configure your VPN remotely.
Detect always-on
Android doesn’t include APIs to confirm whether the system started your VPN
service. But, when your app flags any service instances it starts, you can assume
that the system started unflagged services for always-on VPN. Here’s an example:

Create an Intent instance to start the VPN service.
Flag the VPN service by putting an extra into the intent.
In the service’s onStartCommand() method, look for the
flag in the intent argument’s extras.

Blocked connections
A person using the device (or an IT admin) can force all traffic to use the VPN.
The system blocks any network traffic that doesn’t use the VPN. People using the
device can find the Block connections without VPN switch in the VPN options
panel in Settings.
Caution: When non-VPN traffic is blocked, apps that aren’t in an allowed
list or in a disallowed list lose their
network connection. Consider warning people when making allowed or disallowed
lists. To learn more, see the following Per-app VPN section.
Opt out of always-on
If your app can’t currently support always-on VPN, you can opt out (in Android
8.1 or higher) by setting the
SERVICE_META_DATA_SUPPORTS_ALWAYS_ON
service metadata to false. The following app manifest example shows how to add
the metadata element:
<service android:name=".MyVpnService"
         android:permission="android.permission.BIND_VPN_SERVICE">
     <intent-filter>
         <action android:name="android.net.VpnService"/>
     </intent-filter>
     <meta-data android:name="android.net.VpnService.SUPPORTS_ALWAYS_ON"
             android:value=false/>
</service>

When your app opts out of always-on VPN, the system disables the options UI
controls in Settings.
Per-app VPN
VPN apps can filter which installed apps are allowed to send traffic through the
VPN connection. You can create either an allowed list, or, a disallowed list,
but not both. If you don’t create allowed or disallowed lists, the system sends
all network traffic through the VPN.
Your VPN app must set the lists before the connection is established. If you
need to change the lists, establish a new VPN connection. An app must be
installed on the device when you add it to a list.


Kotlin
// The apps that will have access to the VPN.
val appPackages = arrayOf(
        "com.android.chrome",
        "com.google.android.youtube",
        "com.example.a.missing.app")

// Loop through the app packages in the array and confirm that the app is
// installed before adding the app to the allowed list.
val builder = Builder()
for (appPackage in appPackages) {
    try {
        packageManager.getPackageInfo(appPackage, 0)
        builder.addAllowedApplication(appPackage)
    } catch (e: PackageManager.NameNotFoundException) {
        // The app isn't installed.
    }
}

// Complete the VPN interface config.
val localTunnel = builder
        .addAddress("2001:db8::1", 64)
        .addRoute("::", 0)
        .establish()


Java
// The apps that will have access to the VPN.
String[] appPackages = {
    "com.android.chrome",
    "com.google.android.youtube",
    "com.example.a.missing.app"};

// Loop through the app packages in the array and confirm that the app is
// installed before adding the app to the allowed list.
VpnService.Builder builder = new VpnService.Builder();
PackageManager packageManager = getPackageManager();
for (String appPackage: appPackages) {
  try {
    packageManager.getPackageInfo(appPackage, 0);
    builder.addAllowedApplication(appPackage);
  } catch (PackageManager.NameNotFoundException e) {
    // The app isn't installed.
  }
}

// Complete the VPN interface config.
ParcelFileDescriptor localTunnel = builder
    .addAddress("2001:db8::1", 64)
    .addRoute("::", 0)
    .establish();


Allowed apps
To add an app to the allowed list, call
VpnService.Builder.addAllowedApplication(). If
the list includes one or more apps, then only the apps in the list use the VPN.
All other apps (that aren’t in the list) use the system networks as if the VPN
isn’t running. When the allowed list is empty, all apps use the VPN.
Disallowed apps
To add an app to the disallowed list, call
VpnService.Builder.addDisallowedApplication().
Disallowed apps use system networking as if the VPN wasn’t running—all other
apps use the VPN.
Bypass VPN
Your VPN can allow apps to bypass the VPN and select their own network. To
bypass the VPN, call VpnService.Builder.allowBypass() when
establishing a VPN interface. You can’t change this value after you start your
VPN service. If an app doesn’t bind their process or a socket to a specific
network, the app’s network traffic continues through the VPN.
Apps that bind to a specific network don’t have a connection when somebody
blocks traffic that doesn't go through the VPN. To send traffic through a specific
network, apps call methods, such as
ConnectivityManager.bindProcessToNetwork() or
Network.bindSocket() before connecting the socket.
Sample code
The Android Open Source Project includes a sample app called ToyVPN.
This app shows how to set up and connect a VPN service.


Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated January 17, 2019.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
