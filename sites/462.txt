RenderScript Numerical Types  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    RenderScript Numerical Types
  



Overview
Scalars:
RenderScript supports the following scalar numerical types:

  8 bits         16 bits          32 bits        64 bits
Integer:          char, int8_t  short, int16_t  int32_t  long, long long, int64_t
Unsigned integer: uchar, uint8_t ushort, uint16_t uint, uint32_t ulong, uint64_t
Floating point:     half             float          double

 Vectors:
 RenderScript supports fixed size vectors of length 2, 3, and 4.
Vectors are declared using the common type name followed by a 2, 3, or 4.
E.g. float4, int3, double2, ulong4.

 To create vector literals, use the vector type followed by the values enclosed
between curly braces, e.g. (float3){1.0f, 2.0f, 3.0f}.

 Entries of a vector can be accessed using different naming styles.

 Single entries can be accessed by following the variable name with a dot and:
The letters x, y, z, and w,
The letters r, g, b, and a,
The letter s or S, followed by a zero based index.
 For example, with int4 myVar; the following are equivalent:
  myVar.x == myVar.r == myVar.s0 == myVar.S0
  myVar.y == myVar.g == myVar.s1 == myVar.S1
  myVar.z == myVar.b == myVar.s2 == myVar.S2
  myVar.w == myVar.a == myVar.s3 == myVar.S3

 Multiple entries of a vector can be accessed at once by using an identifier that is
the concatenation of multiple letters or indices.  The resulting vector has a size
equal to the number of entries named.

 With the example above, the middle two entries can be accessed using
myVar.yz, myVar.gb, myVar.s12, and myVar.S12.

 The entries don't have to be contiguous or in increasing order.  Entries can even be
repeated, as long as we're not trying to assign to it.  You also can't mix the naming
styles.

 Here are examples of what can or can't be done:
float4 v4;
float3 v3;
float2 v2;
v2 = v4.xx; // Valid
v3 = v4.zxw; // Valid
v3 = v4.bba; // Valid
v3 = v4.s032; // Valid
v3.s120 = v4.S233; // Valid
v4.yz = v3.rg; // Valid
v4.yzx = v3.rg; // Invalid: mismatched sizes
v4.yzz = v3; // Invalid: z appears twice in an assignment
v3 = v3.xas0; // Invalid: can't mix xyzw with rgba nor s0...
v3 = v4.s034; // Invalid: the digit can only be 0, 1, 2, or 3


 Matrices and Quaternions:
 RenderScript supports fixed size square matrices of floats of size 2x2, 3x3, and 4x4.
The types are named rs_matrix2x2, rs_matrix3x3, and rs_matrix4x4.  See
Matrix Functions for the list of operations.

 Quaternions are also supported via rs_quaternion.  See Quaterion Functions for the list
of operations.

Summary

Types


char2


      Two 8 bit signed integers
    



char3


      Three 8 bit signed integers
    



char4


      Four 8 bit signed integers
    



double2


      Two 64 bit floats
    



double3


      Three 64 bit floats
    



double4


      Four 64 bit floats
    



float2


      Two 32 bit floats
    



float3


      Three 32 bit floats
    



float4


      Four 32 bit floats
    



half


      16 bit floating point value
    



half2


      Two 16 bit floats
    



half3


      Three 16 bit floats
    



half4


      Four 16 bit floats
    



int16_t


      16 bit signed integer
    



int2


      Two 32 bit signed integers
    



int3


      Three 32 bit signed integers
    



int32_t


      32 bit signed integer
    



int4


      Four 32 bit signed integers
    



int64_t


      64 bit signed integer
    



int8_t


      8 bit signed integer
    



long2


      Two 64 bit signed integers
    



long3


      Three 64 bit signed integers
    



long4


      Four 64 bit signed integers
    



rs_matrix2x2


      2x2 matrix of 32 bit floats
    



rs_matrix3x3


      3x3 matrix of 32 bit floats
    



rs_matrix4x4


      4x4 matrix of 32 bit floats
    



rs_quaternion


      Quaternion
    



short2


      Two 16 bit signed integers
    



short3


      Three 16 bit signed integers
    



short4


      Four 16 bit signed integers
    



size_t


      Unsigned size type
    



ssize_t


      Signed size type
    



uchar


      8 bit unsigned integer
    



uchar2


      Two 8 bit unsigned integers
    



uchar3


      Three 8 bit unsigned integers
    



uchar4


      Four 8 bit unsigned integers
    



uint


      32 bit unsigned integer
    



uint16_t


      16 bit unsigned integer
    



uint2


      Two 32 bit unsigned integers
    



uint3


      Three 32 bit unsigned integers
    



uint32_t


      32 bit unsigned integer
    



uint4


      Four 32 bit unsigned integers
    



uint64_t


      64 bit unsigned integer
    



uint8_t


      8 bit unsigned integer
    



ulong


      64 bit unsigned integer
    



ulong2


      Two 64 bit unsigned integers
    



ulong3


      Three 64 bit unsigned integers
    



ulong4


      Four 64 bit unsigned integers
    



ushort


      16 bit unsigned integer
    



ushort2


      Two 16 bit unsigned integers
    



ushort3


      Three 16 bit unsigned integers
    



ushort4


      Four 16 bit unsigned integers
    


Types



char2
: Two 8 bit signed integers


A typedef of: char __attribute__((ext_vector_type(2)))     
 A vector of two chars.  These two chars are packed into a single 16 bit field
with a 16 bit alignment.






char3
: Three 8 bit signed integers


A typedef of: char __attribute__((ext_vector_type(3)))     
 A vector of three chars.  These three chars are packed into a single 32 bit field
with a 32 bit alignment.






char4
: Four 8 bit signed integers


A typedef of: char __attribute__((ext_vector_type(4)))     
 A vector of four chars.  These four chars are packed into a single 32 bit field
with a 32 bit alignment.






double2
: Two 64 bit floats


A typedef of: double __attribute__((ext_vector_type(2)))     
 A vector of two doubles.  These two double fields packed into a single 128 bit field
with a 128 bit alignment.






double3
: Three 64 bit floats


A typedef of: double __attribute__((ext_vector_type(3)))     
 A vector of three doubles.  These three double fields packed into a single 256 bit field
with a 256 bit alignment.






double4
: Four 64 bit floats


A typedef of: double __attribute__((ext_vector_type(4)))     
 A vector of four doubles.  These four double fields packed into a single 256 bit field
with a 256 bit alignment.






float2
: Two 32 bit floats


A typedef of: float __attribute__((ext_vector_type(2)))     
 A vector of two floats.  These two floats are packed into a single 64 bit field
with a 64 bit alignment.

 A vector of two floats.  These two floats are packed into a single 64 bit field
with a 64 bit alignment.






float3
: Three 32 bit floats


A typedef of: float __attribute__((ext_vector_type(3)))     
 A vector of three floats.  These three floats are packed into a single 128 bit field
with a 128 bit alignment.






float4
: Four 32 bit floats


A typedef of: float __attribute__((ext_vector_type(4)))     
 A vector of four floats type.  These four floats are packed into a single 128 bit field
with a 128 bit alignment.






half
: 16 bit floating point value


A typedef of: __fp16     Added in API level 23

 A 16 bit floating point value.






half2
: Two 16 bit floats


A typedef of: half __attribute__((ext_vector_type(2)))     Added in API level 23

 Vector version of the half float type. Provides two half fields packed
into a single 32 bit field with 32 bit alignment.






half3
: Three 16 bit floats


A typedef of: half __attribute__((ext_vector_type(3)))     Added in API level 23

 Vector version of the half float type. Provides three half fields packed
into a single 64 bit field with 64 bit alignment.






half4
: Four 16 bit floats


A typedef of: half __attribute__((ext_vector_type(4)))     Added in API level 23

 Vector version of the half float type. Provides four half fields packed
into a single 64 bit field with 64 bit alignment.






int16_t
: 16 bit signed integer


A typedef of: short     
 A 16 bit signed integer type.






int2
: Two 32 bit signed integers


A typedef of: int __attribute__((ext_vector_type(2)))     
 A vector of two ints.  These two ints are packed into a single 64 bit field
with a 64 bit alignment.






int3
: Three 32 bit signed integers


A typedef of: int __attribute__((ext_vector_type(3)))     
 A vector of three ints.  These three ints are packed into a single 128 bit field
with a 128 bit alignment.






int32_t
: 32 bit signed integer


A typedef of: int     
 A 32 bit signed integer type.






int4
: Four 32 bit signed integers


A typedef of: int __attribute__((ext_vector_type(4)))     
 A vector of four ints.  These two fours are packed into a single 128 bit field
with a 128 bit alignment.






int64_t
: 64 bit signed integer


A typedef of: long long     Removed from API level 21 and higher

A typedef of: long     Added in API level 21

 A 64 bit signed integer type.






int8_t
: 8 bit signed integer


A typedef of: char     
 8 bit signed integer type.






long2
: Two 64 bit signed integers


A typedef of: long __attribute__((ext_vector_type(2)))     
 A vector of two longs.  These two longs are packed into a single 128 bit field
with a 128 bit alignment.






long3
: Three 64 bit signed integers


A typedef of: long __attribute__((ext_vector_type(3)))     
 A vector of three longs.  These three longs are packed into a single 256 bit field
with a 256 bit alignment.






long4
: Four 64 bit signed integers


A typedef of: long __attribute__((ext_vector_type(4)))     
 A vector of four longs.  These four longs are packed into a single 256 bit field
with a 256 bit alignment.






rs_matrix2x2
: 2x2 matrix of 32 bit floats


A structure with the following fields:     

float m[4]

 A square 2x2 matrix of floats.  The entries are stored in the array at the
location [row*2 + col].

 See Matrix Functions.






rs_matrix3x3
: 3x3 matrix of 32 bit floats


A structure with the following fields:     

float m[9]

 A square 3x3 matrix of floats.  The entries are stored in the array at the
location [row*3 + col].

 See Matrix Functions.






rs_matrix4x4
: 4x4 matrix of 32 bit floats


A structure with the following fields:     

float m[16]

 A square 4x4 matrix of floats.  The entries are stored in the array at the
location [row*4 + col].

 See Matrix Functions.






rs_quaternion
: Quaternion


A typedef of: float4     
 A square 4x4 matrix of floats that represents a quaternion.

 See Quaternion Functions.






short2
: Two 16 bit signed integers


A typedef of: short __attribute__((ext_vector_type(2)))     
 A vector of two shorts.  These two shorts are packed into a single 32 bit field
with a 32 bit alignment.






short3
: Three 16 bit signed integers


A typedef of: short __attribute__((ext_vector_type(3)))     
 A vector of three shorts.  These three short fields packed into a single 64 bit field
with a 64 bit alignment.






short4
: Four 16 bit signed integers


A typedef of: short __attribute__((ext_vector_type(4)))     
 A vector of four shorts.  These four short fields packed into a single 64 bit field
with a 64 bit alignment.






size_t
: Unsigned size type


A typedef of: uint64_t     When compiling for 64 bits.

A typedef of: uint32_t     When compiling for 32 bits.

 Unsigned size type.  The number of bits depend on the compilation flags.






ssize_t
: Signed size type


A typedef of: int64_t     When compiling for 64 bits.

A typedef of: int32_t     When compiling for 32 bits.

 Signed size type.  The number of bits depend on the compilation flags.






uchar
: 8 bit unsigned integer


A typedef of: uint8_t     
 8 bit unsigned integer type.






uchar2
: Two 8 bit unsigned integers


A typedef of: uchar __attribute__((ext_vector_type(2)))     
 A vector of two uchars.  These two uchar fields packed into a single 16 bit field
with a 16 bit alignment.






uchar3
: Three 8 bit unsigned integers


A typedef of: uchar __attribute__((ext_vector_type(3)))     
 A vector of three uchars.  These three uchar fields packed into a single 32 bit field
with a 32 bit alignment.






uchar4
: Four 8 bit unsigned integers


A typedef of: uchar __attribute__((ext_vector_type(4)))     
 A vector of four uchars.  These four uchar fields packed into a single 32 bit field
with a 32 bit alignment.






uint
: 32 bit unsigned integer


A typedef of: uint32_t     
 A 32 bit unsigned integer type.






uint16_t
: 16 bit unsigned integer


A typedef of: unsigned short     
 A 16 bit unsigned integer type.






uint2
: Two 32 bit unsigned integers


A typedef of: uint __attribute__((ext_vector_type(2)))     
 A vector of two uints.  These two uints are packed into a single 64 bit field
with a 64 bit alignment.






uint3
: Three 32 bit unsigned integers


A typedef of: uint __attribute__((ext_vector_type(3)))     
 A vector of three uints.  These three uints are packed into a single 128 bit field
with a 128 bit alignment.






uint32_t
: 32 bit unsigned integer


A typedef of: unsigned int     
 A 32 bit unsigned integer type.






uint4
: Four 32 bit unsigned integers


A typedef of: uint __attribute__((ext_vector_type(4)))     
 A vector of four uints.  These four uints are packed into a single 128 bit field
with a 128 bit alignment.






uint64_t
: 64 bit unsigned integer


A typedef of: unsigned long long     Removed from API level 21 and higher

A typedef of: unsigned long     Added in API level 21

 A 64 bit unsigned integer type.






uint8_t
: 8 bit unsigned integer


A typedef of: unsigned char     
 8 bit unsigned integer type.






ulong
: 64 bit unsigned integer


A typedef of: uint64_t     
 A 64 bit unsigned integer type.






ulong2
: Two 64 bit unsigned integers


A typedef of: ulong __attribute__((ext_vector_type(2)))     
 A vector of two ulongs.  These two ulongs are packed into a single 128 bit field
with a 128 bit alignment.






ulong3
: Three 64 bit unsigned integers


A typedef of: ulong __attribute__((ext_vector_type(3)))     
 A vector of three ulongs.  These three ulong fields packed into a single 256 bit field
with a 256 bit alignment.






ulong4
: Four 64 bit unsigned integers


A typedef of: ulong __attribute__((ext_vector_type(4)))     
 A vector of four ulongs.  These four ulong fields packed into a single 256 bit field
with a 256 bit alignment.






ushort
: 16 bit unsigned integer


A typedef of: uint16_t     
 A 16 bit unsigned integer type.






ushort2
: Two 16 bit unsigned integers


A typedef of: ushort __attribute__((ext_vector_type(2)))     
 A vector of two ushorts.  These two ushort fields packed into a single 32 bit field
with a 32 bit alignment.






ushort3
: Three 16 bit unsigned integers


A typedef of: ushort __attribute__((ext_vector_type(3)))     
 A vector of three ushorts.  These three ushort fields packed into a single 64 bit field
with a 64 bit alignment.






ushort4
: Four 16 bit unsigned integers


A typedef of: ushort __attribute__((ext_vector_type(4)))     
 A vector of four ushorts.  These four ushort fields packed into a single 64 bit field
with a 64 bit alignment.






Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated April 23, 2018.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
