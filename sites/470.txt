RenderScript Allocation Data Access Functions  |  Android DevelopersAndroid Developers
          Platform
        
          Android Studio
        
          Google Play
        
          Android Jetpack
        
          Docs
        
          News
        
    
    
    
      Documentation
    
    
  
          Overview
        
          Guides
        
          Reference
        
          Samples
        
          Design & Quality
        







          Platform
        



          Android Studio
        



          Google Play
        



          Android Jetpack
        



          Docs
        




          Overview
        



          Guides
        



          Reference
        



          Samples
        



          Design & Quality
        






          News
        












App BasicsIntroductionBuild your first appOverviewCreate an Android projectRun your appBuild a simple user interfaceStart another activityApp fundamentalsApp resourcesOverviewHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionComplex XML resourcesResource typesOverviewAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileOverview<action><activity><activity-alias><application><category><compatible-screens><data><grant-uri-permission><instrumentation><intent-filter><manifest><meta-data><path-permission><permission><permission-group><permission-tree><provider><receiver><service><supports-gl-texture><supports-screens><uses-configuration><uses-feature><uses-library><uses-permission><uses-permission-sdk-23><uses-sdk>App permissionsOverviewRequest app permissionsApp permissions best practicesDefine custom permissionsDevicesDevice compatibilityOverviewScreen compatibility overviewSupport different screen sizesSupport different pixel densitiesSupport display cutoutsDeclare restricted screen supportMultiple APK supportOverviewCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versionsFilters on Google PlayWearOverviewAdding wearable features to notificationsOverviewCreating a notificationNotification stylesBridging mode for notificationsMaintaining compatibilityCreating wearable appsOverviewCreating and running a wearable appStandalone appsCreating custom layoutsKeeping your app visibleAuthentication in WearAdding voice capabilitiesPackaging and distributing Wear appsDebugging a Wear appCapturing Wear UI screenshotsCreating Wear apps for ChinaCreating custom UIsOverviewDefining layoutsCreating listsShowing confirmationsExiting full-screen activitiesUsing the Wear UI libraryWear navigation and actionsMulti-function buttonsRotary inputCreating input method editorsUsing wrist gesturesSending and syncing dataOverviewNetwork access and syncingAccessing the wearable data layerSyncing data itemsTransferring assetsSending and receiving messagesHandling data layer eventsMigrating Wear apps to GoogleApiCreating data providersOverviewExpose data to complicationsCreating watch facesOverviewDesigning watch facesBuilding a watch face serviceDrawing watch facesWatch face complicationsExposing data to complicationsAdding complications to a watch faceCreating interactive watch facesProviding configuration activitiesAddressing common issuesOptimizing watch facesDetecting locationRequesting PermissionsUsing the SpeakerAndroid TVOverviewBuilding TV AppsOverviewGetting started with TV appsHandling TV hardwareManaging TV controllersBuilding TV layoutsCreating TV navigationBuilding TV playback appsOverviewCreating a catalog browserProviding a card viewBuilding a details viewUsing Leanback transport controlsDisplaying a now playing cardAdding a guided stepIntroducing first-time users to your appEnabling background playbackHelping users find content on TVOverviewRecommending TV contentOverviewChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch next attributesPreviewing videosRecommendations in Android N and earlierMaking TV apps searchableSearching within TV AppsBuilding TV gamesBuilding TV channelsOverviewDeveloping a TV input serviceWorking with channel dataManaging user interactionSupporting time-shiftingSupporting content recordingTV Apps checklistAndroid AutoOverviewGetting Started with AutoPlaying Audio for AutoMessaging for AutoTesting for AutoAndroid ThingsOverviewPlatform differencesGoogle servicesSupported hardwareDeveloper kitsGet startedNXP i.MX7DRaspberry Pi 3Advanced setupOverviewManually flash an imageRecover a deviceConnecting to Wi-Fi with adbBuild appsCreate a Things appOverviewCreate a projectConnect the hardwareInteract with peripheralsIntegrate peripheral driversCommunicate with wireless devicesBluetoothLoWPANConfigure devicesSettingsUpdatesInteract with peripheralsOverviewGPIOPWMI2CSPIUARTNative PIOCLI toolIntegrate native codeBuild user-space driversOverviewLocationInputSensorsLoWPANSamplesManage devicesOverviewCreate a productConfigure a productCreate a buildOverviewManage appsPush an updateOverviewAutomatic updatesMonitor analyticsTermsConsole Terms of ServiceSDK License AgreementAndroid Things ConsoleChrome OS devicesOverviewBuilding apps for Chrome OSPreparing your development environmentOptimizing Apps for Chrome OSResolving Issues with Screen SizeApp Manifest Compatibility for ChromebooksLoading Apps on ChromebooksChrome OS Device Support for AppsApp Rendering Differences on ChromebooksWindow managementInput compatibility for ChromebooksAndroid Studio on Chrome OSChrome OS devices on EmulatorTest Cases for Android Apps on Chrome OSCore topicsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your activitiesTasks and back stackProcesses and app lifecycleParcelables and bundlesFragmentsOverviewCreate a fragmentTest your fragmentsBuild a flexible UICommunicate with other fragmentsInteract with other appsOverviewSending the user to another appGetting a result from an activityAllowing other apps to start your activityHandling app linksOverviewEnabling links to app contentVerify app linksCreate app links for instant appsLoadersRecents screenMulti-window supportApp shortcutsOverviewCreate shortcutsManage shortcutsBest practices for shortcutsApp widgetsOverviewBuild an app widgetBuild an app widget hostArchitecture ComponentsOverviewAdding Components to your ProjectData Binding LibraryOverviewGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture ComponentsTwo-way data bindingHandling LifecyclesLiveDataNavigationOverviewImplement NavigationUpdate UI components with NavigationUINested graphsPass data between destinationsAdd support for new destinationImplement conditional navigationCreate a deep link for a destinationGlobal actionsMigrate to the Navigation ComponentPaging LibraryOverviewUI Components and ConsiderationsData Components and ConsiderationsRoom Persistence LibraryViewModelWorkManagerOverviewBasicsAdvancedMigrating from Firebase JobDispatcherSaving StatesRelease notesIntents and intent filtersOverviewCommon intentsUser interface & navigationOverviewLayoutsOverviewBuild a responsive UI with ConstraintLayoutCreate a list with RecyclerViewCreate a card-based layoutImplementing adaptive UI flowsImproving layout performanceOverviewOptimizing layout hierarchiesRe-using layouts with <include/>Delayed loading of viewsMaking ListView scrolling smoothLinear layoutAdapter viewRelative layoutCustom view componentsOverviewCreating a custom view classImplementing custom drawingMaking the view interactiveOptimizing the viewLook and feelMaterial designStyles and themesAdaptive iconsAdd a floating action buttonCreate shadows and clip viewsTextAutosizing TextViewsDownloadable fontsFonts in XMLEmoji compatibilityMagnifier widgetSpansButtonsCheckboxesRadio buttonsToggle buttonsSpinnersPickersTooltipsNotificationsOverviewCreate a notificationCreate an expandable notificationStart an activity from a notificationCreate a group of notificationsCreate and manage notification channelsModify a notification BadgeCreate a custom notificationAdd the app barOverviewSet up the app barAdd and handle actionsAdd an up actionUse action views and action providersControl the system UI visibilityOverviewDim the system barsHide the status barHide the navigation barEnable fullscreen modeRespond to UI visibility changesDesigning effective navigationOverviewPlanning screens and their relationshipsPlanning for multiple touchscreen sizesProviding descendant and lateral navigationDesigning back and up navigationPutting it all together: wireframing the example appImplementing effective navigationOverviewCreating swipe views with tabsCreating a navigation drawerProviding up navigationProviding proper back navigationImplementing descendant navigationSlide between fragments using ViewPagerSupporting swipe-to-refreshOverviewAdding swipe-to-refresh to your appResponding to a refresh gestureToasts overviewPop-up messages overviewOverviewBuild and display a pop-up messageAdd an action to a messageDialogsMenusSettingsOverviewOrganize your settingsCustomize your settingsUse saved valuesBuild a hierarchy in codeHandle other form factorsPreference components and attributesSearchOverviewCreating a search interfaceAdding recent query suggestionsAdding custom suggestionsSearchable configurationAdding search functionalityOverviewSetting up the search interfaceStoring and searching for dataRemaining backward compatibleCopy and pasteDrag and dropCreating backward-compatible UIsOverviewAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIsUsing the version-aware componentAnimations & transitionsOverviewAnimations overviewProperty animation overviewAnimate drawable graphicsReveal or hide a view using animationMove a view using animationMove a view using a fling animationEnlarge a view using a zoom animationAnimate movement using spring physicsAuto animate layout updatesAnimate layout changes using a transitionCreate a custom transition animationStart an activity using an animationImages & graphicsOverviewDrawables overviewVector drawables overviewHandling bitmapsSelecting colors with the palette APIReducing image download sizesHardware accelerationOpenGL ESDisplaying graphics with OpenGL ESOverviewBuilding an OpenGL ES environmentDefining shapesDrawing shapesApplying projection and camera viewsAdding motionResponding to touch eventsRenderingOverviewReducing overdrawPerformance and view hierarchiesAnalyzing with profile GPU renderingEnhancing graphics with wide color contentAudio & videoAudio & video overviewSupported media formatsMedia app architectureMedia app architecture overviewUsing a media sessionBuilding an audio appAudio app overviewBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appVideo app overviewBuilding a video player activityMedia session callbacksResponding to media buttonsHandling changes in audio outputManaging audio focusThe Google Assistant and media appsRouting between devicesRouting overviewMediaRouter overviewMediaRouteProvider overviewControl amplitude with VolumeShaperMediaPlayer overviewMediaRecorder overviewExoPlayerBackground tasksOverviewGuide to background processingSending operations to multiple threadsOverviewSpecify the code to run on a threadCreate a manager for multiple threadsRun code on a thread pool threadCommunicate with the UI threadSchedule jobs intelligentlyServicesOverviewCreate a background serviceSend work requests to the background serviceReport work statusBound servicesAIDL overviewBackground optimizationsBroadcasts overviewImplicit Broadcast ExceptionsManage device awake stateOverviewKeep the device awakeSchedule repeating alarmsApp data & filesOverviewStorage overviewSave files on device storageSave key-value dataSave data in a local databaseOverviewDefine data using entitiesCreate views into a databaseAccess data using DAOsMigrate your databaseTest your databaseReference complex dataSharing simple dataOverviewSending simple data to other appsReceiving simple data from other appsAdding an easy share actionSharing filesOverviewSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files with NFCOverviewSending files to another deviceReceiving files from another devicePrinting filesOverviewPrinting photosPrinting HTML documentsPrinting custom documentsContent providersOverviewContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data & identityOverviewAdd sign-in workflowAutofill frameworkOverviewOptimize your app for autofillBuild autofill servicesCalendar provider overviewContacts providerOverviewRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badgeAccount transferData backupOverviewBack up user dataBack up key-value pairsOverviewRegisterTest backup and restoreBest practices for unique identifiersRemember and authenticate usersOverviewRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationOverviewOptimize location for batteryGet the last known locationChange location settingsReceive location updatesDisplay a location addressCreate and monitor geofencesDetect when users start an activityMigrate to location and context APIsAdd mapsTouch & inputOverviewInput eventsUsing touch gesturesOverviewDetect common gesturesTrack touch and pointer movementsAnimate a scroll gestureHandle multi-touch gesturesDrag and scaleManage touch events in a ViewGroupHandling keyboard inputOverviewSpecifying the input method typeHandling input method visibilitySupporting keyboard navigationHandling keyboard actionsSupporting game controllersOverviewHandling controller actionsSupporting controllers across Android versionsSupporting multiple game controllersInput method editorsCreating an input methodImage keyboardSpelling checkerCameraOverviewTaking photosRecording videosControlling the cameraCamera APISensorsOverviewSensors overviewMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityOverviewPerforming network operationsOverviewConnect to the networkManage network usageOptimize network data usageParse XML dataTransmit network data using VolleyOverviewSend a simple requestSet up RequestQueueMake a standard requestImplement a custom requestPerform network operations using CronetOverviewSend a simple requestCronet request lifecycleReferenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfoOverviewHeaderBlockTransferring data without draining the batteryOverviewOptimize downloads for efficient network accessMinimize the effect of regular updatesAvoid redundant downloadsModify patterns based on the connectivity typeReduce network battery drainOverviewCollecting network traffic dataAnalyzing data trafficOptimizing user-initiated network useOptimizing app-initiated network useOptimizing server-initiated network useOptimizing general network useTransfer data using Sync AdaptersOverviewCreate a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterBluetoothOverviewBluetooth low energy overviewNFCOverviewNFC basicsAdvanced NFCHost-based card emulation overviewTelecomOverviewBuild a calling appWi-FiWi-Fi scanning overviewWi-Fi peer-to-peer overviewWi-Fi aware overviewWi-Fi location with RTTCompanion device pairing overviewUSBOverviewAccessory overviewHost overviewVPNSession initiation protocol overviewDiscover and connectOverviewUse network service discoveryCreate P2P connections with Wi-FiUse Wi-Fi P2P for service discoveryRenderscriptOverviewAdvanced RenderScriptRuntime API referenceOverviewNumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functionsQuaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexWeb-based contentOverviewBuilding web apps in WebViewManaging WebView objectsMigrating to WebView in Android 4.4Supporting different screens in web appsDebugging web appsBest practices for web appsAndroid App BundlesOverviewDownload modules with the Play Core LibraryGoogle Play InstantOverview of Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesOverviewUnity pluginTechnical requirements checklist for gamesUX best practices for gamesReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsGoogle Play Instant policyResourcesReferenceCode samplesSDK release notesSupportFAQsKnown issuesStackOverflowApp ActionsSlicesOverviewGetting StartedSlice templatesBest practicesTestingOverviewFundamentals of testingSet up projectBuilding effective unit testsOverviewBuilding local unit testsBuilding instrumented unit testsAutomating UI testsOverviewTesting UI for a single appTesting UI for multiple appsTesting app component integrationsOverviewTesting your serviceTesting your content providerTesting UI performanceEspressoOverviewSetup instructionsBasicsRecipesMultiprocessAccessibility checkingListsIntentsWebIdling resourceCheat sheetUI AutomatorJUnit4 RulesAndroidJUnitRunnerSamplesRelease notesPerformanceOverviewAndroid VitalsOverviewStuck Partial Wake LocksExcessive WakeupsExcessive Background Wi-Fi ScansExcessive Background Network UsageANRsCrashesSlow RenderingFrozen FramesPermission DenialsApp Startup TimeApp Standby BucketsProcesses and Threads OverviewBetter Performance through ThreadingOptimizing for Battery LifeOverviewOptimizing for Doze and App StandbyMonitoring the Battery Level and Charging StateDetermining and Monitoring the Docking State and TypeDetermining and Monitoring the Connectivity StatusPower Management RestrictionsAnalyzing Power Use with Battery HistorianTesting power-related issuesReducing APK SizeManage Your App's MemoryOverview of Memory ManagemementDesigning for SeamlessnessKeeping Your App ResponsivePerformance TipsSMP Primer for AndroidVerifying App Behavior on the Android Runtime (ART)AccessibilityOverviewMaking apps more accessibleUsing node tree debuggingBuilding accessibility servicesBuild accessible custom viewsBuild accessibility serviceTest your app's accessibilitySecurityApp security best practicesSecurity tipsSecurity with HTTPS and SSLNetwork security configurationUpdating your security provider to protect against SSL exploitsProtecting against security threats with SafetyNetOverviewSafetyNet Attestation APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APICryptographyAndroid Keystore SystemVerifying hardware-backed key pairs with key attestationAndroid Protected ConfirmationSupporting Direct BootUsing scoped directory accessApp security improvement programBuild for BillionsOverviewConnectivityDevice capabilityData costBattery consumptionUI and contentBuild for EnterpriseOverviewDeveloper guideWork profilesSet up managed configurationsWork contactsDevice management policiesDevice managementOverviewBuild a device policy controllerWork profiles on fully managed devicesDedicated devicesOverviewLock task modeMultiple usersCookbookDevice controlNetworking and telephonySecuritySystem updatesNetwork activity loggingAndroid versionsOverviewAndroid 9Android 8.0Android 7.0Device administrationGoogle PlayGoogle Play BillingOverviewUse the Google Play Billing LibraryOverviewAdd one-time product-specific featuresAdd subscription-specific featuresPlay Billing Library referencePlay Billing Library release notesUse In-app Billing with AIDLOverviewIn-app Billing ReferenceAdd Real-time Developer NotificationsBest PracticesTest Google Play BillingMaking Your App Content Searchable by GoogleOptimizing Contextual Content for the AssistantGoogle Play Developer APIAPK Expansion FilesApplication LicensingOverviewLicensing OverviewSetting Up for LicensingAdding Licensing to Your AppLicensing ReferenceGoogle Play Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceReleases NotesPlay Install Referrer API









    
    
      Android Developers
    
    
    




    
    
      Docs
    
    
    




    
    
      Guides
    
    
    




    RenderScript Allocation Data Access Functions
  



Overview
The functions below can be used to get and set the cells that comprise
an allocation.

Individual cells are accessed using the rsGetElementAt* and
  rsSetElementAt functions.
Multiple cells can be copied using the rsAllocationCopy* and
  rsAllocationV* functions.
For getting values through a sampler, use rsSample.

The rsGetElementAt and rsSetElement* functions are somewhat misnamed.
They don't get or set elements, which are akin to data types; they get
or set cells.  Think of them as rsGetCellAt and and rsSetCellAt.

Summary

Functions


rsAllocationCopy1DRange


      Copy consecutive cells between allocations
    



rsAllocationCopy2DRange


      Copy a rectangular region of cells between allocations
    



rsAllocationVLoadX


      Get a vector from an allocation of scalars
    



rsAllocationVStoreX


      Store a vector into an allocation of scalars
    



rsGetElementAt


      Return a cell from an allocation
    



rsGetElementAtYuv_uchar_U


      Get the U component of an allocation of YUVs
    



rsGetElementAtYuv_uchar_V


      Get the V component of an allocation of YUVs
    



rsGetElementAtYuv_uchar_Y


      Get the Y component of an allocation of YUVs
    



rsSample


      Sample a value from a texture allocation
    



rsSetElementAt


      Set a cell of an allocation
    


Functions



rsAllocationCopy1DRange
: Copy consecutive cells between allocations




void rsAllocationCopy1DRange(rs_allocation dstAlloc, uint32_t dstOff, uint32_t dstMip, uint32_t count, rs_allocation srcAlloc, uint32_t srcOff, uint32_t srcMip);

    Added in API level 14




 Parameters

dstAllocAllocation to copy cells into.
dstOffOffset in the destination of the first cell to be copied into.
dstMipMip level in the destination allocation.  0 if mip mapping is not used.
countNumber of cells to be copied.
srcAllocSource allocation.
srcOffOffset in the source of the first cell to be copied.
srcMipMip level in the source allocation.  0 if mip mapping is not used.



 Copies the specified number of cells from one allocation to another.

 The two allocations must be different.  Using this function to copy whithin
the same allocation yields undefined results.

 The function does not validate whether the offset plus count exceeds the size
of either allocation.  Be careful!

 This function should only be called between 1D allocations.  Calling it
on other allocations is undefined.

 This function should not be called from inside a kernel, or from any function
that may be called directly or indirectly from a kernel. Doing so would cause a
runtime error.






rsAllocationCopy2DRange
: Copy a rectangular region of cells between allocations




void rsAllocationCopy2DRange(rs_allocation dstAlloc, uint32_t dstXoff, uint32_t dstYoff, uint32_t dstMip, rs_allocation_cubemap_face dstFace, uint32_t width, uint32_t height, rs_allocation srcAlloc, uint32_t srcXoff, uint32_t srcYoff, uint32_t srcMip, rs_allocation_cubemap_face srcFace);

    Added in API level 14




 Parameters

dstAllocAllocation to copy cells into.
dstXoffX offset in the destination of the region to be set.
dstYoffY offset in the destination of the region to be set.
dstMipMip level in the destination allocation.  0 if mip mapping is not used.
dstFaceCubemap face of the destination allocation.  Ignored for allocations that aren't cubemaps.
widthWidth of the incoming region to update.
heightHeight of the incoming region to update.
srcAllocSource allocation.
srcXoffX offset in the source.
srcYoffY offset in the source.
srcMipMip level in the source allocation.  0 if mip mapping is not used.
srcFaceCubemap face of the source allocation.  Ignored for allocations that aren't cubemaps.



 Copies a rectangular region of cells from one allocation to another.
(width * heigth) cells are copied.

 The two allocations must be different.  Using this function to copy whithin
the same allocation yields undefined results.

 The function does not validate whether the the source or destination region
exceeds the size of its respective allocation.  Be careful!

 This function should only be called between 2D allocations.  Calling it
on other allocations is undefined.

 This function should not be called from inside a kernel, or from any function
that may be called directly or indirectly from a kernel. Doing so would cause a
runtime error.






rsAllocationVLoadX
: Get a vector from an allocation of scalars




char2 rsAllocationVLoadX_char2(rs_allocation a, uint32_t x);

    Added in API level 22



char2 rsAllocationVLoadX_char2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



char2 rsAllocationVLoadX_char2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



char3 rsAllocationVLoadX_char3(rs_allocation a, uint32_t x);

    Added in API level 22



char3 rsAllocationVLoadX_char3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



char3 rsAllocationVLoadX_char3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



char4 rsAllocationVLoadX_char4(rs_allocation a, uint32_t x);

    Added in API level 22



char4 rsAllocationVLoadX_char4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



char4 rsAllocationVLoadX_char4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



double2 rsAllocationVLoadX_double2(rs_allocation a, uint32_t x);

    Added in API level 22



double2 rsAllocationVLoadX_double2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



double2 rsAllocationVLoadX_double2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



double3 rsAllocationVLoadX_double3(rs_allocation a, uint32_t x);

    Added in API level 22



double3 rsAllocationVLoadX_double3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



double3 rsAllocationVLoadX_double3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



double4 rsAllocationVLoadX_double4(rs_allocation a, uint32_t x);

    Added in API level 22



double4 rsAllocationVLoadX_double4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



double4 rsAllocationVLoadX_double4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



float2 rsAllocationVLoadX_float2(rs_allocation a, uint32_t x);

    Added in API level 22



float2 rsAllocationVLoadX_float2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



float2 rsAllocationVLoadX_float2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



float3 rsAllocationVLoadX_float3(rs_allocation a, uint32_t x);

    Added in API level 22



float3 rsAllocationVLoadX_float3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



float3 rsAllocationVLoadX_float3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



float4 rsAllocationVLoadX_float4(rs_allocation a, uint32_t x);

    Added in API level 22



float4 rsAllocationVLoadX_float4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



float4 rsAllocationVLoadX_float4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



int2 rsAllocationVLoadX_int2(rs_allocation a, uint32_t x);

    Added in API level 22



int2 rsAllocationVLoadX_int2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



int2 rsAllocationVLoadX_int2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



int3 rsAllocationVLoadX_int3(rs_allocation a, uint32_t x);

    Added in API level 22



int3 rsAllocationVLoadX_int3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



int3 rsAllocationVLoadX_int3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



int4 rsAllocationVLoadX_int4(rs_allocation a, uint32_t x);

    Added in API level 22



int4 rsAllocationVLoadX_int4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



int4 rsAllocationVLoadX_int4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



long2 rsAllocationVLoadX_long2(rs_allocation a, uint32_t x);

    Added in API level 22



long2 rsAllocationVLoadX_long2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



long2 rsAllocationVLoadX_long2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



long3 rsAllocationVLoadX_long3(rs_allocation a, uint32_t x);

    Added in API level 22



long3 rsAllocationVLoadX_long3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



long3 rsAllocationVLoadX_long3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



long4 rsAllocationVLoadX_long4(rs_allocation a, uint32_t x);

    Added in API level 22



long4 rsAllocationVLoadX_long4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



long4 rsAllocationVLoadX_long4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



short2 rsAllocationVLoadX_short2(rs_allocation a, uint32_t x);

    Added in API level 22



short2 rsAllocationVLoadX_short2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



short2 rsAllocationVLoadX_short2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



short3 rsAllocationVLoadX_short3(rs_allocation a, uint32_t x);

    Added in API level 22



short3 rsAllocationVLoadX_short3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



short3 rsAllocationVLoadX_short3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



short4 rsAllocationVLoadX_short4(rs_allocation a, uint32_t x);

    Added in API level 22



short4 rsAllocationVLoadX_short4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



short4 rsAllocationVLoadX_short4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



uchar2 rsAllocationVLoadX_uchar2(rs_allocation a, uint32_t x);

    Added in API level 22



uchar2 rsAllocationVLoadX_uchar2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



uchar2 rsAllocationVLoadX_uchar2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



uchar3 rsAllocationVLoadX_uchar3(rs_allocation a, uint32_t x);

    Added in API level 22



uchar3 rsAllocationVLoadX_uchar3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



uchar3 rsAllocationVLoadX_uchar3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



uchar4 rsAllocationVLoadX_uchar4(rs_allocation a, uint32_t x);

    Added in API level 22



uchar4 rsAllocationVLoadX_uchar4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



uchar4 rsAllocationVLoadX_uchar4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



uint2 rsAllocationVLoadX_uint2(rs_allocation a, uint32_t x);

    Added in API level 22



uint2 rsAllocationVLoadX_uint2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



uint2 rsAllocationVLoadX_uint2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



uint3 rsAllocationVLoadX_uint3(rs_allocation a, uint32_t x);

    Added in API level 22



uint3 rsAllocationVLoadX_uint3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



uint3 rsAllocationVLoadX_uint3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



uint4 rsAllocationVLoadX_uint4(rs_allocation a, uint32_t x);

    Added in API level 22



uint4 rsAllocationVLoadX_uint4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



uint4 rsAllocationVLoadX_uint4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



ulong2 rsAllocationVLoadX_ulong2(rs_allocation a, uint32_t x);

    Added in API level 22



ulong2 rsAllocationVLoadX_ulong2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



ulong2 rsAllocationVLoadX_ulong2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



ulong3 rsAllocationVLoadX_ulong3(rs_allocation a, uint32_t x);

    Added in API level 22



ulong3 rsAllocationVLoadX_ulong3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



ulong3 rsAllocationVLoadX_ulong3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



ulong4 rsAllocationVLoadX_ulong4(rs_allocation a, uint32_t x);

    Added in API level 22



ulong4 rsAllocationVLoadX_ulong4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



ulong4 rsAllocationVLoadX_ulong4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



ushort2 rsAllocationVLoadX_ushort2(rs_allocation a, uint32_t x);

    Added in API level 22



ushort2 rsAllocationVLoadX_ushort2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



ushort2 rsAllocationVLoadX_ushort2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



ushort3 rsAllocationVLoadX_ushort3(rs_allocation a, uint32_t x);

    Added in API level 22



ushort3 rsAllocationVLoadX_ushort3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



ushort3 rsAllocationVLoadX_ushort3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



ushort4 rsAllocationVLoadX_ushort4(rs_allocation a, uint32_t x);

    Added in API level 22



ushort4 rsAllocationVLoadX_ushort4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 22



ushort4 rsAllocationVLoadX_ushort4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22




 Parameters

aAllocation to get the data from.
xX offset in the allocation of the first cell to be copied from.
yY offset in the allocation of the first cell to be copied from.
zZ offset in the allocation of the first cell to be copied from.



 This function returns a vector composed of successive cells of the allocation.
It assumes that the allocation contains scalars.

 The "X" in the name indicates that successive values are extracted by
increasing the X index.  There are currently no functions to get successive
values incrementing other dimensions.  Use multiple calls to rsGetElementAt()
instead.

 For example, when calling rsAllocationVLoadX_int4(a, 20, 30), an int4 composed
of a[20, 30], a[21, 30], a[22, 30], and a[23, 30] is returned.

 When retrieving from a three dimensional allocations, use the x, y, z variant.
Similarly, use the x, y variant for two dimensional allocations and x for the
mono dimensional allocations.

 For efficiency, this function does not validate the inputs.  Trying to wrap
the X index, exceeding the size of the allocation, or using indices incompatible
with the dimensionality of the allocation yields undefined results.

 See also rsAllocationVStoreX().






rsAllocationVStoreX
: Store a vector into an allocation of scalars




void rsAllocationVStoreX_char2(rs_allocation a, char2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_char2(rs_allocation a, char2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_char2(rs_allocation a, char2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_char3(rs_allocation a, char3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_char3(rs_allocation a, char3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_char3(rs_allocation a, char3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_char4(rs_allocation a, char4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_char4(rs_allocation a, char4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_char4(rs_allocation a, char4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_double2(rs_allocation a, double2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_double2(rs_allocation a, double2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_double2(rs_allocation a, double2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_double3(rs_allocation a, double3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_double3(rs_allocation a, double3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_double3(rs_allocation a, double3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_double4(rs_allocation a, double4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_double4(rs_allocation a, double4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_double4(rs_allocation a, double4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_float2(rs_allocation a, float2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_float2(rs_allocation a, float2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_float2(rs_allocation a, float2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_float3(rs_allocation a, float3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_float3(rs_allocation a, float3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_float3(rs_allocation a, float3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_float4(rs_allocation a, float4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_float4(rs_allocation a, float4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_float4(rs_allocation a, float4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_int2(rs_allocation a, int2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_int2(rs_allocation a, int2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_int2(rs_allocation a, int2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_int3(rs_allocation a, int3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_int3(rs_allocation a, int3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_int3(rs_allocation a, int3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_int4(rs_allocation a, int4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_int4(rs_allocation a, int4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_int4(rs_allocation a, int4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_long2(rs_allocation a, long2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_long2(rs_allocation a, long2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_long2(rs_allocation a, long2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_long3(rs_allocation a, long3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_long3(rs_allocation a, long3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_long3(rs_allocation a, long3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_long4(rs_allocation a, long4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_long4(rs_allocation a, long4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_long4(rs_allocation a, long4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_short2(rs_allocation a, short2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_short2(rs_allocation a, short2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_short2(rs_allocation a, short2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_short3(rs_allocation a, short3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_short3(rs_allocation a, short3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_short3(rs_allocation a, short3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_short4(rs_allocation a, short4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_short4(rs_allocation a, short4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_short4(rs_allocation a, short4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_uchar2(rs_allocation a, uchar2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_uchar2(rs_allocation a, uchar2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_uchar2(rs_allocation a, uchar2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_uchar3(rs_allocation a, uchar3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_uchar3(rs_allocation a, uchar3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_uchar3(rs_allocation a, uchar3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_uchar4(rs_allocation a, uchar4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_uchar4(rs_allocation a, uchar4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_uchar4(rs_allocation a, uchar4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_uint2(rs_allocation a, uint2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_uint2(rs_allocation a, uint2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_uint2(rs_allocation a, uint2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_uint3(rs_allocation a, uint3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_uint3(rs_allocation a, uint3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_uint3(rs_allocation a, uint3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_uint4(rs_allocation a, uint4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_uint4(rs_allocation a, uint4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_uint4(rs_allocation a, uint4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_ulong2(rs_allocation a, ulong2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_ulong2(rs_allocation a, ulong2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_ulong2(rs_allocation a, ulong2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_ulong3(rs_allocation a, ulong3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_ulong3(rs_allocation a, ulong3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_ulong3(rs_allocation a, ulong3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_ulong4(rs_allocation a, ulong4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_ulong4(rs_allocation a, ulong4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_ulong4(rs_allocation a, ulong4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_ushort2(rs_allocation a, ushort2 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_ushort2(rs_allocation a, ushort2 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_ushort2(rs_allocation a, ushort2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_ushort3(rs_allocation a, ushort3 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_ushort3(rs_allocation a, ushort3 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_ushort3(rs_allocation a, ushort3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22



void rsAllocationVStoreX_ushort4(rs_allocation a, ushort4 val, uint32_t x);

    Added in API level 22



void rsAllocationVStoreX_ushort4(rs_allocation a, ushort4 val, uint32_t x, uint32_t y);

    Added in API level 22



void rsAllocationVStoreX_ushort4(rs_allocation a, ushort4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 22




 Parameters

aAllocation to store the data into.
valValue to be stored.
xX offset in the allocation of the first cell to be copied into.
yY offset in the allocation of the first cell to be copied into.
zZ offset in the allocation of the first cell to be copied into.



 This function stores the entries of a vector into successive cells of an allocation.
It assumes that the allocation contains scalars.

 The "X" in the name indicates that successive values are stored by increasing
the X index.  There are currently no functions to store successive values
incrementing other dimensions.  Use multiple calls to rsSetElementAt() instead.

 For example, when calling rsAllocationVStoreX_int3(a, v, 20, 30), v.x is stored
at a[20, 30], v.y at a[21, 30], and v.z at a[22, 30].

 When storing into a three dimensional allocations, use the x, y, z variant.
Similarly, use the x, y variant for two dimensional allocations and x for the
mono dimensional allocations.

 For efficiency, this function does not validate the inputs.  Trying to wrap the
X index, exceeding the size of the allocation, or using indices incompatible
with the dimensionality of the allocation yiels undefined results.

 See also rsAllocationVLoadX().






rsGetElementAt
: Return a cell from an allocation




char rsGetElementAt_char(rs_allocation a, uint32_t x);

 


char rsGetElementAt_char(rs_allocation a, uint32_t x, uint32_t y);

 


char rsGetElementAt_char(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


char2 rsGetElementAt_char2(rs_allocation a, uint32_t x);

 


char2 rsGetElementAt_char2(rs_allocation a, uint32_t x, uint32_t y);

 


char2 rsGetElementAt_char2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


char3 rsGetElementAt_char3(rs_allocation a, uint32_t x);

 


char3 rsGetElementAt_char3(rs_allocation a, uint32_t x, uint32_t y);

 


char3 rsGetElementAt_char3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


char4 rsGetElementAt_char4(rs_allocation a, uint32_t x);

 


char4 rsGetElementAt_char4(rs_allocation a, uint32_t x, uint32_t y);

 


char4 rsGetElementAt_char4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


const void* rsGetElementAt(rs_allocation a, uint32_t x);

 


const void* rsGetElementAt(rs_allocation a, uint32_t x, uint32_t y);

 


const void* rsGetElementAt(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


double rsGetElementAt_double(rs_allocation a, uint32_t x);

 


double rsGetElementAt_double(rs_allocation a, uint32_t x, uint32_t y);

 


double rsGetElementAt_double(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


double2 rsGetElementAt_double2(rs_allocation a, uint32_t x);

 


double2 rsGetElementAt_double2(rs_allocation a, uint32_t x, uint32_t y);

 


double2 rsGetElementAt_double2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


double3 rsGetElementAt_double3(rs_allocation a, uint32_t x);

 


double3 rsGetElementAt_double3(rs_allocation a, uint32_t x, uint32_t y);

 


double3 rsGetElementAt_double3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


double4 rsGetElementAt_double4(rs_allocation a, uint32_t x);

 


double4 rsGetElementAt_double4(rs_allocation a, uint32_t x, uint32_t y);

 


double4 rsGetElementAt_double4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


float rsGetElementAt_float(rs_allocation a, uint32_t x);

 


float rsGetElementAt_float(rs_allocation a, uint32_t x, uint32_t y);

 


float rsGetElementAt_float(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


float2 rsGetElementAt_float2(rs_allocation a, uint32_t x);

 


float2 rsGetElementAt_float2(rs_allocation a, uint32_t x, uint32_t y);

 


float2 rsGetElementAt_float2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


float3 rsGetElementAt_float3(rs_allocation a, uint32_t x);

 


float3 rsGetElementAt_float3(rs_allocation a, uint32_t x, uint32_t y);

 


float3 rsGetElementAt_float3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


float4 rsGetElementAt_float4(rs_allocation a, uint32_t x);

 


float4 rsGetElementAt_float4(rs_allocation a, uint32_t x, uint32_t y);

 


float4 rsGetElementAt_float4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


half rsGetElementAt_half(rs_allocation a, uint32_t x);

    Added in API level 23



half rsGetElementAt_half(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 23



half rsGetElementAt_half(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



half2 rsGetElementAt_half2(rs_allocation a, uint32_t x);

    Added in API level 23



half2 rsGetElementAt_half2(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 23



half2 rsGetElementAt_half2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



half3 rsGetElementAt_half3(rs_allocation a, uint32_t x);

    Added in API level 23



half3 rsGetElementAt_half3(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 23



half3 rsGetElementAt_half3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



half4 rsGetElementAt_half4(rs_allocation a, uint32_t x);

    Added in API level 23



half4 rsGetElementAt_half4(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 23



half4 rsGetElementAt_half4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



int rsGetElementAt_int(rs_allocation a, uint32_t x);

 


int rsGetElementAt_int(rs_allocation a, uint32_t x, uint32_t y);

 


int rsGetElementAt_int(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


int2 rsGetElementAt_int2(rs_allocation a, uint32_t x);

 


int2 rsGetElementAt_int2(rs_allocation a, uint32_t x, uint32_t y);

 


int2 rsGetElementAt_int2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


int3 rsGetElementAt_int3(rs_allocation a, uint32_t x);

 


int3 rsGetElementAt_int3(rs_allocation a, uint32_t x, uint32_t y);

 


int3 rsGetElementAt_int3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


int4 rsGetElementAt_int4(rs_allocation a, uint32_t x);

 


int4 rsGetElementAt_int4(rs_allocation a, uint32_t x, uint32_t y);

 


int4 rsGetElementAt_int4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


long rsGetElementAt_long(rs_allocation a, uint32_t x);

 


long rsGetElementAt_long(rs_allocation a, uint32_t x, uint32_t y);

 


long rsGetElementAt_long(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


long2 rsGetElementAt_long2(rs_allocation a, uint32_t x);

 


long2 rsGetElementAt_long2(rs_allocation a, uint32_t x, uint32_t y);

 


long2 rsGetElementAt_long2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


long3 rsGetElementAt_long3(rs_allocation a, uint32_t x);

 


long3 rsGetElementAt_long3(rs_allocation a, uint32_t x, uint32_t y);

 


long3 rsGetElementAt_long3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


long4 rsGetElementAt_long4(rs_allocation a, uint32_t x);

 


long4 rsGetElementAt_long4(rs_allocation a, uint32_t x, uint32_t y);

 


long4 rsGetElementAt_long4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


short rsGetElementAt_short(rs_allocation a, uint32_t x);

 


short rsGetElementAt_short(rs_allocation a, uint32_t x, uint32_t y);

 


short rsGetElementAt_short(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


short2 rsGetElementAt_short2(rs_allocation a, uint32_t x);

 


short2 rsGetElementAt_short2(rs_allocation a, uint32_t x, uint32_t y);

 


short2 rsGetElementAt_short2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


short3 rsGetElementAt_short3(rs_allocation a, uint32_t x);

 


short3 rsGetElementAt_short3(rs_allocation a, uint32_t x, uint32_t y);

 


short3 rsGetElementAt_short3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


short4 rsGetElementAt_short4(rs_allocation a, uint32_t x);

 


short4 rsGetElementAt_short4(rs_allocation a, uint32_t x, uint32_t y);

 


short4 rsGetElementAt_short4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uchar rsGetElementAt_uchar(rs_allocation a, uint32_t x);

 


uchar rsGetElementAt_uchar(rs_allocation a, uint32_t x, uint32_t y);

 


uchar rsGetElementAt_uchar(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uchar2 rsGetElementAt_uchar2(rs_allocation a, uint32_t x);

 


uchar2 rsGetElementAt_uchar2(rs_allocation a, uint32_t x, uint32_t y);

 


uchar2 rsGetElementAt_uchar2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uchar3 rsGetElementAt_uchar3(rs_allocation a, uint32_t x);

 


uchar3 rsGetElementAt_uchar3(rs_allocation a, uint32_t x, uint32_t y);

 


uchar3 rsGetElementAt_uchar3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uchar4 rsGetElementAt_uchar4(rs_allocation a, uint32_t x);

 


uchar4 rsGetElementAt_uchar4(rs_allocation a, uint32_t x, uint32_t y);

 


uchar4 rsGetElementAt_uchar4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uint rsGetElementAt_uint(rs_allocation a, uint32_t x);

 


uint rsGetElementAt_uint(rs_allocation a, uint32_t x, uint32_t y);

 


uint rsGetElementAt_uint(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uint2 rsGetElementAt_uint2(rs_allocation a, uint32_t x);

 


uint2 rsGetElementAt_uint2(rs_allocation a, uint32_t x, uint32_t y);

 


uint2 rsGetElementAt_uint2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uint3 rsGetElementAt_uint3(rs_allocation a, uint32_t x);

 


uint3 rsGetElementAt_uint3(rs_allocation a, uint32_t x, uint32_t y);

 


uint3 rsGetElementAt_uint3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


uint4 rsGetElementAt_uint4(rs_allocation a, uint32_t x);

 


uint4 rsGetElementAt_uint4(rs_allocation a, uint32_t x, uint32_t y);

 


uint4 rsGetElementAt_uint4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ulong rsGetElementAt_ulong(rs_allocation a, uint32_t x);

 


ulong rsGetElementAt_ulong(rs_allocation a, uint32_t x, uint32_t y);

 


ulong rsGetElementAt_ulong(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ulong2 rsGetElementAt_ulong2(rs_allocation a, uint32_t x);

 


ulong2 rsGetElementAt_ulong2(rs_allocation a, uint32_t x, uint32_t y);

 


ulong2 rsGetElementAt_ulong2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ulong3 rsGetElementAt_ulong3(rs_allocation a, uint32_t x);

 


ulong3 rsGetElementAt_ulong3(rs_allocation a, uint32_t x, uint32_t y);

 


ulong3 rsGetElementAt_ulong3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ulong4 rsGetElementAt_ulong4(rs_allocation a, uint32_t x);

 


ulong4 rsGetElementAt_ulong4(rs_allocation a, uint32_t x, uint32_t y);

 


ulong4 rsGetElementAt_ulong4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ushort rsGetElementAt_ushort(rs_allocation a, uint32_t x);

 


ushort rsGetElementAt_ushort(rs_allocation a, uint32_t x, uint32_t y);

 


ushort rsGetElementAt_ushort(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ushort2 rsGetElementAt_ushort2(rs_allocation a, uint32_t x);

 


ushort2 rsGetElementAt_ushort2(rs_allocation a, uint32_t x, uint32_t y);

 


ushort2 rsGetElementAt_ushort2(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ushort3 rsGetElementAt_ushort3(rs_allocation a, uint32_t x);

 


ushort3 rsGetElementAt_ushort3(rs_allocation a, uint32_t x, uint32_t y);

 


ushort3 rsGetElementAt_ushort3(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 


ushort4 rsGetElementAt_ushort4(rs_allocation a, uint32_t x);

 


ushort4 rsGetElementAt_ushort4(rs_allocation a, uint32_t x, uint32_t y);

 


ushort4 rsGetElementAt_ushort4(rs_allocation a, uint32_t x, uint32_t y, uint32_t z);

 




 This function extracts a single cell from an allocation.

 When retrieving from a three dimensional allocations, use the x, y, z variant.
Similarly, use the x, y variant for two dimensional allocations and x for the
mono dimensional allocations.

 This function has two styles.  One returns the address of the value using a void*,
the other returns the actual value, e.g. rsGetElementAt() vs. rsGetElementAt_int4().
For primitive types, always use the latter as it is more efficient.






rsGetElementAtYuv_uchar_U
: Get the U component of an allocation of YUVs




uchar rsGetElementAtYuv_uchar_U(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 18





 Extracts the U component of a single YUV value from a 2D allocation of YUVs.

 Inside an allocation, Y, U, and V components may be stored if different planes
and at different resolutions.  The x, y coordinates provided here are in the
dimensions of the Y plane.

 See rsGetElementAtYuv_uchar_Y().






rsGetElementAtYuv_uchar_V
: Get the V component of an allocation of YUVs




uchar rsGetElementAtYuv_uchar_V(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 18





 Extracts the V component of a single YUV value from a 2D allocation of YUVs.

 Inside an allocation, Y, U, and V components may be stored if different planes
and at different resolutions.  The x, y coordinates provided here are in the
dimensions of the Y plane.

 See rsGetElementAtYuv_uchar_Y().






rsGetElementAtYuv_uchar_Y
: Get the Y component of an allocation of YUVs




uchar rsGetElementAtYuv_uchar_Y(rs_allocation a, uint32_t x, uint32_t y);

    Added in API level 18





 Extracts the Y component of a single YUV value from a 2D allocation of YUVs.

 Inside an allocation, Y, U, and V components may be stored if different planes
and at different resolutions.  The x, y coordinates provided here are in the
dimensions of the Y plane.

 See rsGetElementAtYuv_uchar_U() and rsGetElementAtYuv_uchar_V().






rsSample
: Sample a value from a texture allocation




float4 rsSample(rs_allocation a, rs_sampler s, float location);

    Added in API level 16



float4 rsSample(rs_allocation a, rs_sampler s, float location, float lod);

    Added in API level 16



float4 rsSample(rs_allocation a, rs_sampler s, float2 location);

    Added in API level 16



float4 rsSample(rs_allocation a, rs_sampler s, float2 location, float lod);

    Added in API level 16




 Parameters

aAllocation to sample from.
sSampler state.
locationLocation to sample from.
lodMip level to sample from, for fractional values mip levels will be interpolated if RS_SAMPLER_LINEAR_MIP_LINEAR is used.



 Fetches a value from a texture allocation in a way described by the sampler.

 If your allocation is 1D, use the variant with float for location.  For 2D,
use the float2 variant.

 See android.renderscript.Sampler for more details.






rsSetElementAt
: Set a cell of an allocation




void rsSetElementAt(rs_allocation a, void* ptr, uint32_t x);

    Added in API level 18



void rsSetElementAt(rs_allocation a, void* ptr, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_char(rs_allocation a, char val, uint32_t x);

    Added in API level 18



void rsSetElementAt_char(rs_allocation a, char val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_char(rs_allocation a, char val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_char2(rs_allocation a, char2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_char2(rs_allocation a, char2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_char2(rs_allocation a, char2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_char3(rs_allocation a, char3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_char3(rs_allocation a, char3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_char3(rs_allocation a, char3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_char4(rs_allocation a, char4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_char4(rs_allocation a, char4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_char4(rs_allocation a, char4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_double(rs_allocation a, double val, uint32_t x);

    Added in API level 18



void rsSetElementAt_double(rs_allocation a, double val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_double(rs_allocation a, double val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_double2(rs_allocation a, double2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_double2(rs_allocation a, double2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_double2(rs_allocation a, double2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_double3(rs_allocation a, double3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_double3(rs_allocation a, double3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_double3(rs_allocation a, double3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_double4(rs_allocation a, double4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_double4(rs_allocation a, double4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_double4(rs_allocation a, double4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_float(rs_allocation a, float val, uint32_t x);

    Added in API level 18



void rsSetElementAt_float(rs_allocation a, float val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_float(rs_allocation a, float val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_float2(rs_allocation a, float2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_float2(rs_allocation a, float2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_float2(rs_allocation a, float2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_float3(rs_allocation a, float3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_float3(rs_allocation a, float3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_float3(rs_allocation a, float3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_float4(rs_allocation a, float4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_float4(rs_allocation a, float4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_float4(rs_allocation a, float4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_half(rs_allocation a, half val, uint32_t x);

    Added in API level 23



void rsSetElementAt_half(rs_allocation a, half val, uint32_t x, uint32_t y);

    Added in API level 23



void rsSetElementAt_half(rs_allocation a, half val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



void rsSetElementAt_half2(rs_allocation a, half2 val, uint32_t x);

    Added in API level 23



void rsSetElementAt_half2(rs_allocation a, half2 val, uint32_t x, uint32_t y);

    Added in API level 23



void rsSetElementAt_half2(rs_allocation a, half2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



void rsSetElementAt_half3(rs_allocation a, half3 val, uint32_t x);

    Added in API level 23



void rsSetElementAt_half3(rs_allocation a, half3 val, uint32_t x, uint32_t y);

    Added in API level 23



void rsSetElementAt_half3(rs_allocation a, half3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



void rsSetElementAt_half4(rs_allocation a, half4 val, uint32_t x);

    Added in API level 23



void rsSetElementAt_half4(rs_allocation a, half4 val, uint32_t x, uint32_t y);

    Added in API level 23



void rsSetElementAt_half4(rs_allocation a, half4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 23



void rsSetElementAt_int(rs_allocation a, int val, uint32_t x);

    Added in API level 18



void rsSetElementAt_int(rs_allocation a, int val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_int(rs_allocation a, int val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_int2(rs_allocation a, int2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_int2(rs_allocation a, int2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_int2(rs_allocation a, int2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_int3(rs_allocation a, int3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_int3(rs_allocation a, int3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_int3(rs_allocation a, int3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_int4(rs_allocation a, int4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_int4(rs_allocation a, int4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_int4(rs_allocation a, int4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_long(rs_allocation a, long val, uint32_t x);

    Added in API level 18



void rsSetElementAt_long(rs_allocation a, long val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_long(rs_allocation a, long val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_long2(rs_allocation a, long2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_long2(rs_allocation a, long2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_long2(rs_allocation a, long2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_long3(rs_allocation a, long3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_long3(rs_allocation a, long3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_long3(rs_allocation a, long3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_long4(rs_allocation a, long4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_long4(rs_allocation a, long4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_long4(rs_allocation a, long4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_short(rs_allocation a, short val, uint32_t x);

    Added in API level 18



void rsSetElementAt_short(rs_allocation a, short val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_short(rs_allocation a, short val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_short2(rs_allocation a, short2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_short2(rs_allocation a, short2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_short2(rs_allocation a, short2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_short3(rs_allocation a, short3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_short3(rs_allocation a, short3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_short3(rs_allocation a, short3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_short4(rs_allocation a, short4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_short4(rs_allocation a, short4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_short4(rs_allocation a, short4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uchar(rs_allocation a, uchar val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uchar(rs_allocation a, uchar val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uchar(rs_allocation a, uchar val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uchar2(rs_allocation a, uchar2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uchar2(rs_allocation a, uchar2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uchar2(rs_allocation a, uchar2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uchar3(rs_allocation a, uchar3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uchar3(rs_allocation a, uchar3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uchar3(rs_allocation a, uchar3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uchar4(rs_allocation a, uchar4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uchar4(rs_allocation a, uchar4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uchar4(rs_allocation a, uchar4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uint(rs_allocation a, uint val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uint(rs_allocation a, uint val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uint(rs_allocation a, uint val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uint2(rs_allocation a, uint2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uint2(rs_allocation a, uint2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uint2(rs_allocation a, uint2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uint3(rs_allocation a, uint3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uint3(rs_allocation a, uint3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uint3(rs_allocation a, uint3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_uint4(rs_allocation a, uint4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_uint4(rs_allocation a, uint4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_uint4(rs_allocation a, uint4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ulong(rs_allocation a, ulong val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ulong(rs_allocation a, ulong val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ulong(rs_allocation a, ulong val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ulong2(rs_allocation a, ulong2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ulong2(rs_allocation a, ulong2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ulong2(rs_allocation a, ulong2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ulong3(rs_allocation a, ulong3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ulong3(rs_allocation a, ulong3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ulong3(rs_allocation a, ulong3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ulong4(rs_allocation a, ulong4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ulong4(rs_allocation a, ulong4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ulong4(rs_allocation a, ulong4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ushort(rs_allocation a, ushort val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ushort(rs_allocation a, ushort val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ushort(rs_allocation a, ushort val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ushort2(rs_allocation a, ushort2 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ushort2(rs_allocation a, ushort2 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ushort2(rs_allocation a, ushort2 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ushort3(rs_allocation a, ushort3 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ushort3(rs_allocation a, ushort3 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ushort3(rs_allocation a, ushort3 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18



void rsSetElementAt_ushort4(rs_allocation a, ushort4 val, uint32_t x);

    Added in API level 18



void rsSetElementAt_ushort4(rs_allocation a, ushort4 val, uint32_t x, uint32_t y);

    Added in API level 18



void rsSetElementAt_ushort4(rs_allocation a, ushort4 val, uint32_t x, uint32_t y, uint32_t z);

    Added in API level 18





 This function stores a value into a single cell of an allocation.

 When storing into a three dimensional allocations, use the x, y, z variant.
Similarly, use the x, y variant for two dimensional allocations and x for
the mono dimensional allocations.

 This function has two styles.  One passes the value to be stored using a void*,
the other has the actual value as an argument, e.g. rsSetElementAt() vs.
rsSetElementAt_int4().  For primitive types, always use the latter as it is
more efficient.

 See also rsGetElementAt().






Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates.

      
      Last updated April 23, 2018.
    





          
          
            Twitter
          
        Follow @AndroidDev on Twitter
          
          
            YouTube
          
        Check out Android Developers on YouTubeMore Android
                Android
            
                Enterprise
            
                Security
            
                Source
            Support
                Report platform bug
            
                Report documentation bug
            
                Google Play support
            
                Join user studies
            Documentation
                Developer guides
            
                Design guides
            
                API reference
            
                Samples
            
                Android Studio
            
                Android
            
                Chrome
            
                Firebase
            
                Google Cloud Platform
            
                All Products
            
            Bahasa Indonesia
          
            Deutsch
          
            English
          
            español
          
            Español (América Latina)
          
            français
          
            Português Brasileiro
          
            Tiếng Việt
          
            Türkçe
          
            Русский
          
            ภาษาไทย
          
            日本語
          
            简体中文
          
            繁體中文
          
            한국어
          Privacy
         License
         Brand Guidelines
         
        Get Android and Google Play news by email
      
        
        Subscribe
      
